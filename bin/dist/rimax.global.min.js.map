{"version":3,"file":"rimax.global.min.js","sources":["../../Rimax/hooks/useState.js","../../Rimax/hooks/useRef.js","../../Rimax/hooks/useProps.js","../../Rimax/hooks/useEvent.js","../../Rimax/hooks/useMemo.js","../../Rimax/core/domController.js","../../Rimax/core/rxError.js","../../Rimax/core/RgExp.js","../../Rimax/core/templateRef.js","../../Rimax/core/RxFiber/FiberOfNode.js","../../Rimax/core/RxFiber/FiberOfElement.js","../../Rimax/core/RxFiber/FiberOfFragment.js","../../Rimax/core/RxFiber/FiberOfText.js","../../Rimax/core/core.js","../../Rimax/core/RcHtmlString/HtmlStringParser.js","../../Rimax/core/RcHtmlString/RcHtmlString.js","../../index.js","../../Rimax/core/component.js","../../Rimax/core/customeElement.js","../../Rimax/hooks/useEffect.js","../../Rimax/hooks/useLayoutEffect.js"],"sourcesContent":["const guardFn = v => v\r\nconst stateSymbol = Symbol(\"$$State\")\r\nconst isState = ((ref) => (typeof ref == \"object\") && stateSymbol === ref[\".rxType\"]).bind()\r\nexport class RXState {\r\n    get isArray() { return Array.isArray(this.value) }\r\n    toString() { return String(this.value) }\r\n    valueOf() { return this.value }\r\n    get [\".rxType\"]() { return stateSymbol }\r\n    static isState = isState\r\n}\r\nfunction createState(value, guard) {\r\n    let currentValueOfState\r\n    let oldValueOfState\r\n    let isDestroyed = false\r\n    let subscriber=0\r\n    const ID = Math.random()\r\n    const GUARDS = []\r\n    const DESTROY_EVENTS = new Set()\r\n    const UPDATE_EVENTS = new Set()\r\n    const ACTIONS={}\r\n    const dispatchUpdate = (option) => { UPDATE_EVENTS.forEach(fn =>fn(currentValueOfState, oldValueOfState, option)) }\r\n    \r\n    return Object.freeze(new (class rxState extends RXState {\r\n        get guards() { return [...GUARDS] }\r\n        get isDestroyed() { return isDestroyed }\r\n        get id() { return ID }\r\n        get len() { return {onChange:UPDATE_EVENTS.size,onCleanup:DESTROY_EVENTS.size,subscriber} }\r\n        addGuard(guard) {\r\n            if (!(guard instanceof Function)) return () => undefined\r\n            const callback = (...a) => guard(...a)\r\n            const lastIndex = GUARDS.push(callback) - 1\r\n            let isRemoved = false\r\n            return () => {\r\n                if (isRemoved) return true\r\n                if (GUARDS[lastIndex] === callback) {\r\n                    GUARDS.splice(lastIndex, 1)\r\n                    isRemoved = true\r\n                    return true\r\n                }\r\n                const i = GUARDS.find(fn => fn === callback)\r\n                if (i > -1) {\r\n                    GUARDS.splice(i, 1)\r\n                    return true\r\n                }\r\n                return false\r\n            }\r\n        }\r\n\r\n        clear(withDom = false) {\r\n            DESTROY_EVENTS.forEach(fn => fn(withDom))\r\n            DESTROY_EVENTS.clear()\r\n            UPDATE_EVENTS.clear()\r\n        }\r\n        destroy(withDom = true) {\r\n            if (isDestroyed) return;\r\n            this.clear(withDom)\r\n            isDestroyed = true\r\n        }\r\n\r\n        onChange = ((callbackOrState, directApply = false) => {\r\n            if (callbackOrState instanceof RXState) {\r\n                const callback = directApply instanceof Function ? directApply : v => v\r\n                const state=callbackOrState\r\n                subscriber++\r\n                let isRemoved\r\n                return this.onChange((...args) =>{\r\n                    state.set(() => callback(...args), ...args.slice(1))\r\n                    return ()=>{\r\n                        if(isRemoved) return\r\n                        isRemoved=true\r\n                        subscriber--\r\n                    }\r\n                }, true)\r\n            }\r\n            if (!(callbackOrState instanceof Function)) throw new Error(\"callback doit être une fonction\")\r\n            const on = {\r\n                dispatch: callbackOrState, destroy: directApply ? callbackOrState(this.value, undefined, { methode: \"set\", value: this.value }) : undefined\r\n            }\r\n            const onDispatch = (...arg) => on.destroy = on.dispatch(...arg)\r\n            let isCalled = false\r\n            const destroy = (...arg) => {\r\n                if (isCalled) return\r\n                isCalled = true\r\n                if (on.destroy instanceof Function) on.destroy(...arg);\r\n                DESTROY_EVENTS.delete(destroy)\r\n                UPDATE_EVENTS.delete(onDispatch)\r\n            }\r\n            UPDATE_EVENTS.add(onDispatch)\r\n            DESTROY_EVENTS.add(destroy)\r\n            return destroy\r\n        }).bind()\r\n        onCleanup = ((callback) => {\r\n            if (!(callback instanceof Function)) throw new Error(\"callback doit être une fonction\")\r\n            const fn=(...args)=>callback(...args)\r\n            DESTROY_EVENTS.add(fn)\r\n            return () => DESTROY_EVENTS.delete(callback)\r\n        }).bind()\r\n\r\n\r\n        get oldValue() { return oldValueOfState }\r\n\r\n        constructor(value, guard = v => v) {\r\n            super()\r\n            Object.defineProperty(this, \"value\", {\r\n                get: (() => currentValueOfState).bind(),\r\n                set: ((value) => this.set(value)).bind(),\r\n                enumerable: true,\r\n            })\r\n            if(guard&& typeof guard ==\"object\"){\r\n                Object.assign(ACTIONS,guard.actions??{})\r\n                guard=guard.guard??(v => v)\r\n            }\r\n            if (!(guard instanceof Function)) throw new Error(\"guard doit être une fonction\")\r\n            currentValueOfState = value\r\n            GUARDS.push(guard)\r\n            const toValidate = (value, oldValue = oldValueOfState, option = {}) => {\r\n                const oldValues = []\r\n                return GUARDS.reduceRight((val, guardFn) => {\r\n                    oldValues.push(val)\r\n                    return guardFn(val, oldValue, option, [...oldValues])\r\n                }, value)\r\n            }\r\n            if (!(value instanceof Promise)) {\r\n                currentValueOfState = toValidate(value, undefined, {})\r\n            }\r\n            const createStateComputed = (callback = () => currentValueOfState, dependencies = [], guard = v => v) => {\r\n                if (!(callback instanceof Function)) throw new Error(\"callback doit être une function\")\r\n                if (isDestroyed) throw new Error(\"cette Etat ne peut plus etre utiliser car elle est deja detruit\")\r\n                const optDependencies=(dependencies&&!Array.isArray(dependencies)&&typeof dependencies==\"object\")?dependencies:{}\r\n                dependencies=Array.isArray(dependencies)?dependencies:optDependencies.dependencies??[]\r\n                if (!Array.isArray(dependencies)) throw new Error(\"dependencies doit être une Array\")\r\n                const update = (option = {}) => callback(currentValueOfState, oldValueOfState, option)\r\n                const optionState={guard,...optDependencies}\r\n                const [state, setState] = useState(update(), optionState)\r\n                if(optionState.guard!==guard)state.addGuard(guard);\r\n                const states = [this, ...dependencies]\r\n                const listrmv = states.map(st => {\r\n                    if (st instanceof RXState) {\r\n                        return st.onChange((_1, _2, option) => {\r\n                            setState(update(option), option)\r\n                            return () => !state.isDestroyed && state.destroy(true)\r\n                        })\r\n                    }\r\n                })\r\n                state.onCleanup(() => listrmv.map(fn => fn instanceof Function && fn()))\r\n                return state\r\n            }\r\n            this.get = ((callback = () => this.value, dependencies = []) => createStateComputed(callback, dependencies)).bind()\r\n            Object.entries(stateType).map(([type, fnGuard]) => this.get[type] = (callback = () => this.value, dependencies = []) => createStateComputed(callback, dependencies, fnGuard))\r\n            this.set = ((value, option = { methode: \"set\", value: value }) => {\r\n                if (isDestroyed) throw new Error(\"cette Etat ne peut plus etre utiliser car elle est deja detruit\")\r\n                if (typeof option != \"object\") throw new Error(\"option doit être un object\")\r\n                if (value instanceof Promise) {\r\n                    return value.then(v => this.set(v))\r\n                }\r\n                if (value instanceof RXState) value = value.value;\r\n                if (value instanceof Function) value = value(currentValueOfState, oldValueOfState)\r\n                const _oldValue = currentValueOfState\r\n                if (_oldValue !== value) {\r\n                    value = toValidate(value, _oldValue, option);\r\n                    oldValueOfState = _oldValue\r\n                    currentValueOfState = value\r\n                    dispatchUpdate(option)\r\n                }\r\n                return currentValueOfState\r\n            }).bind()\r\n            insertArrayMethode(this, { createStateComputed })\r\n            Object.entries(ACTIONS).map(([k,v])=>this.set[k]=payload=>this.set(v instanceof Function ?v(currentValueOfState,payload):v))\r\n            if (value instanceof Promise) {\r\n                value.then(v => this.set(v))\r\n            }\r\n        }\r\n\r\n    })(value, guard))\r\n}\r\nconst stateType = {\r\n    array(v) {\r\n        if (!Array.isArray(v)) throw new Error(\"cette state doit être de type Array\")\r\n        return v\r\n    },\r\n    number(v) {\r\n        if (typeof v != \"number\") throw new Error(\"cette state doit être de type Number\")\r\n        return v\r\n    },\r\n    string(v) {\r\n        if (typeof v != \"string\") throw new Error(\"cette state doit être de type string\")\r\n        return v\r\n    },\r\n    function(v) {\r\n        if (typeof v != \"function\") throw new Error(\"cette state doit être de type function\")\r\n        return v\r\n    },\r\n    boolean(v) {\r\n        if (typeof v != \"boolean\") throw new Error(\"cette state doit être de type boolean\")\r\n        return v\r\n    },\r\n    symbol(v) {\r\n        if (typeof v != \"symbol\") throw new Error(\"cette state doit être de type symbol\")\r\n        return v\r\n    },\r\n    object(v) {\r\n        if (typeof v != \"object\") throw new Error(\"cette state doit être de type object\")\r\n        return v\r\n    },\r\n}\r\nfunction insertArrayMethode(stateInstace, { createStateComputed }) {\r\n    const state = stateInstace\r\n    const isArray = () => {\r\n        if (!state.isArray) throw new Error(\"pour pouvoir utiliser cette methode le type de state doit être une Array\")\r\n    }\r\n    const isFunction = (callback) => {\r\n        if (!(callback instanceof Function)) throw new Error(\"callback doit doit être une function\")\r\n    }\r\n    const getIndex = (index) => {\r\n        if (index instanceof RXState) {\r\n            index = index.value\r\n        }\r\n        if (index instanceof Function) {\r\n            index = state.value.findIndex(index)\r\n        }\r\n        if (isNaN(index)) throw new Error(\"index doit être une nombre ou une fonction qui retourne un nombre\")\r\n        return index\r\n    }\r\n    state.get.map = (callback) => {\r\n        isFunction(callback)\r\n        const createState = (v, i) => [useState(v)[0], useState(i)[0]]\r\n        const rendMap = (v) => callback(...v, state)\r\n        const listState = state.value.map(createState)\r\n        let listElement = listState.map(rendMap)\r\n        const [items, setItems] = useState(listElement)\r\n        const update = () => listState.map(([v, i], index) => {\r\n            if (!i.isDestroyed) i.set(index);\r\n            if (!v.isDestroyed) v.set(state.value[index]);\r\n        })\r\n        state.onChange((val) => {\r\n            if (listState.length > val.length) {\r\n                const indexStart = val.length\r\n                const end = listState.length\r\n                listState.splice(indexStart, end).map(s => s.map(i => i.destroy(true)))\r\n                setItems.splice(indexStart, end)\r\n            } else if (listState.length < val.length) {\r\n                const indexStart = listState.length\r\n                listState.push(...val.slice(indexStart).map(createState))\r\n                listState.map(([, index], i) => index.set(i))\r\n                setItems.push(...listState.slice(indexStart).map(rendMap))\r\n            }\r\n            update()\r\n            // console.log(items.value);\r\n        })\r\n        return items\r\n    }\r\n    state.get.callback = (callback) => {\r\n        if (!(callback instanceof Function)) throw new Error(\"callback doit être une function\")\r\n        return state.get(() => callback)\r\n    }\r\n    const action = (args, action) => {\r\n        isArray()\r\n        if (state.value[action] instanceof Function) {\r\n            const returnValue = state.value[action](...args)\r\n            return state.set([...state.value], { methode: \"set\", action, args, returnValue })\r\n        }\r\n    }\r\n    // TODO: state.set.remove\r\n    // TODO: state.set.removeItem\r\n    // TODO: state.set.editItem\r\n    state.set.splice = (...args) => action([...args], \"splice\")\r\n    state.set.remove = (start, deleteCount = 1) => {\r\n        const returnValue = state.value.splice(start, deleteCount)\r\n        return state.set([...state.value], { methode: \"set\", action: \"remove\", args: [start, deleteCount], returnValue })\r\n    }\r\n    state.set.edit = (index, value) => {\r\n        isArray()\r\n        index = getIndex(index)\r\n        if (index > -1) {\r\n            if (value instanceof Function) {\r\n                value = value(state.value[index], index, state.value)\r\n            }\r\n            const returnValue = state.value.splice(index, 1, value)\r\n            return state.set([...state.value], { methode: \"set\", action: \"edit\", args: [index, value], returnValue })\r\n        }\r\n    }\r\n    state.set.push = (...items) => action([...items], \"push\")\r\n    state.set.pop = () => action([], \"pop\")\r\n    state.set.shift = () => action([], \"shift\")\r\n    state.set.unshift = (...items) => action([...items], \"shift\")\r\n    state.set.reverse = () => action([], \"reverse\")\r\n    state.set.fill = (...items) => action([...items], \"fill\")\r\n    state.set.filter = (predicate, ...args) => {\r\n        isArray()\r\n        isFunction(predicate)\r\n        const returnValue = state.value.filter(predicate, ...args)\r\n        return state.set(returnValue, { methode: \"set\", action: \"filter\", args: [predicate, ...args], returnValue })\r\n    }\r\n    state.set.slice = (...args) => {\r\n        isArray()\r\n        const returnValue = state.value.slice(...args)\r\n        return state.set(returnValue, { methode: \"set\", action: \"slice\", args, returnValue })\r\n    }\r\n    state.set.sort = (compareFn = (a, b) => b - a) => {\r\n        isArray()\r\n        isFunction(compareFn)\r\n        const oldValue = state.value.slice()\r\n        const returnValue = state.value.sort(compareFn)\r\n        if (returnValue.every((item, index) => item === oldValue[index])) return state.value\r\n        return state.set(returnValue, { methode: \"set\", action: \"sort\", args:arguments, returnValue })\r\n    }\r\n    state.set.map = (callbackfn, thisArg = state.value) => {\r\n        isArray()\r\n        isFunction(callbackfn)\r\n        const returnValue = state.value.map(callbackfn, ...args)\r\n        return state.set(returnValue, { methode: \"set\", action: \"map\", args, returnValue })\r\n    }\r\n}\r\n\r\nexport default function useState(value, guard = guardFn) {\r\n    if (value instanceof RXState) {\r\n        value = value\r\n        if (guard instanceof Function && guard !== guardFn) value.addGuard(guard);\r\n    } else if (Array.isArray(value) && value[0] instanceof RXState && value[1] === value[0].set) {\r\n        value = value[0]\r\n        if (guard instanceof Function && guard !== guardFn) value.addGuard(guard);\r\n    } else {\r\n        value = createState(value, guard)\r\n    }\r\n    return [value, value.set]\r\n}\r\n\r\n\r\nObject.entries(stateType).map(([type, guard]) => useState[type] = (value) => useState(value, guard))\r\nuseState.isState = isState","import useState from \"./useState.js\"\r\nconst refSymbol=Symbol(\"$$ref\")\r\nexport default function useRef(value) {\r\n    const [ref, changeRef] = useState(value)\r\n    const OBJECT=Object\r\n    return OBJECT.freeze(new (class Object {\r\n        constructor(){\r\n            OBJECT.defineProperty(this,\"current\",{\r\n                get:(()=>ref.value).bind(),\r\n                set:((val)=>changeRef(val)).bind(),\r\n                enumerable:true,\r\n                configurable:false\r\n            })\r\n            OBJECT.defineProperty(this,\"onChange\",{\r\n                value:((fn)=>ref.onChange(fn)).bind(),\r\n                enumerable:true,\r\n            })\r\n        }\r\n        onCleanup(fn){return ref.onCleanup(fn)}\r\n        destroy(fn){return ref.destroy(true)}\r\n        set(fn){return changeRef(fn)}\r\n        get [\".rxType\"](){return refSymbol}\r\n    }))\r\n}\r\nuseRef.isRef=((ref)=>(typeof ref==\"object\")&&refSymbol===ref[\".rxType\"]).bind()\r\n","import useState from \"./useState.js\";\r\n\r\nexport function useProps(props = {}) {\r\n    if(typeof props !=\"object\") throw new Error(\"props doit être une object\")\r\n    return {\r\n        ...Object.entries(props).reduce((prop, [key, value]) => ({ ...prop, [key]: (key === \"children\" || key.startsWith(\"$\"))? value :useState.isState(value) ?value : useState(value)[0] }), {})\r\n    }\r\n}","const handlerEvent = {\r\n    beforeDispatch: (...args) => [...args],\r\n    afterDispatch: (data, returnValue) => [data, returnValue],\r\n    onSubscribe: callback => callback,\r\n    clearAfterEachDispatch:false\r\n}\r\nexport function useEvent(handler = handlerEvent) {\r\n    if (typeof handler !== \"object\") throw new Error(\"handler doit être un object\")\r\n    const { beforeDispatch=handlerEvent.beforeDispatch, afterDispatch=handlerEvent.afterDispatch, onSubscribe=handlerEvent.onSubscribe,clearAfterEachDispatch=handlerEvent.clearAfterEachDispatch} = handler\r\n    const EVENTS = new Set()\r\n    const subscribe = (callback) => {\r\n        if (!(callback instanceof Function)) throw new Error(\"callback doit être un function\")\r\n        callback = onSubscribe(callback)\r\n        if (callback instanceof Function) EVENTS.add(callback)\r\n        return () => EVENTS.delete(callback)\r\n    }\r\n    return [subscribe, (data,...rest) => {\r\n        const args = beforeDispatch(data,...rest)\r\n        const returnValue = EVENTS.forEach(fn => fn?.(...(Array.isArray(args)?args:[args])))\r\n        if(clearAfterEachDispatch)EVENTS.clear();\r\n        return afterDispatch(data, returnValue)\r\n    }]\r\n}","import useState, { RXState } from \"./useState.js\"\r\n\r\nexport function useMemo(callback, states = []) {\r\n    if (!Array.isArray(states)) throw new Error(\"states doit être une Array\")\r\n    const listRmv = []\r\n    const [state,setState]=useState()\r\n    const array = [...states]\r\n    const getValue = s => s instanceof RXState ? s.value : s\r\n    const update=i=> setState(callback([...array.map(getValue)],i))\r\n    array.forEach((st, i) => {\r\n        if (st instanceof RXState) {\r\n            listRmv.push(st.onChange(() => {update(i)}))\r\n        }\r\n    })\r\n    update(-1)\r\n    state.onCleanup(()=>listRmv.splice(0,listRmv.length).map(fn => fn?.()))\r\n    return state\r\n}","import { useEvent } from \"../hooks/useEvent.js\"\r\nimport { RXState } from \"../hooks/useState.js\"\r\nconst DATABASE = new Map()\r\nfunction createHandler(dom) {\r\n    if (!(dom instanceof Node)) throw new Error(\"dom doit etre un instance de Node\")\r\n    if (DATABASE.get(dom)) return DATABASE.get(dom)\r\n    let isDestroyed = false\r\n    let destroyList = []\r\n    const [onReady, dispatchReady] = useEvent({ clearAfterEachDispatch: true })\r\n    const [onConnected, dispatchConnected] = useEvent({ clearAfterEachDispatch: true })\r\n    let isReady = false\r\n    onReady(() => isReady = true)\r\n    const $children = [...dom.childNodes]\r\n    const textRef = new Text()\r\n    const root = new Text()\r\n    const fiber = null\r\n    const getTextRoot = () => Promise.resolve().then(() => {\r\n        if (dom.parentNode) {\r\n            dom.after(textRef)\r\n            dom.after(root)\r\n        } else if (root.parentNode) {\r\n            root.after(textRef)\r\n        }\r\n        return textRef\r\n    })\r\n    const isValid = () => { if (isDestroyed) throw new Error(\"cette dom est deja considerer comme detruit, donc vous ne peux plus faire cette action...\"); return true }\r\n    function onCleanUp(callback) {\r\n        isValid()\r\n        if (callback instanceof RXState && callback.value instanceof Function) {\r\n            const state = callback\r\n            callback = (...args) => {\r\n                if (!(state.value instanceof Function)) throw new Error(\"state.value doit etre une function\")\r\n                state.value(...args)\r\n            }\r\n        } else if (Array.isArray(callback)) {\r\n            callback.map(fn => handler.onDestroy(fn))\r\n            return\r\n        }\r\n        if ((callback instanceof Function)) {\r\n            destroyList.push(callback)\r\n        }\r\n    }\r\n    const handler = Object.defineProperties({}, {\r\n        getFiber: () => fiber,\r\n        \"onConnected\": {\r\n            get: () => isValid() && onConnected,\r\n            set: val => isValid() && onConnected(val)\r\n        },\r\n        \"onReady\": {\r\n            get: () => isValid() && onReady,\r\n            set: val => isValid() && onReady(val)\r\n        },\r\n        \"isReady\": {\r\n            get: () => isReady,\r\n        },\r\n        \"dispatchReady\": {\r\n            get: () => isValid() && dispatchReady,\r\n        },\r\n        \"dispatchConnected\": {\r\n            get: () => isValid() && dispatchConnected\r\n        },\r\n        \"model\": {},\r\n        isDestroyed: {\r\n            get() { return isDestroyed }\r\n        },\r\n        isClean: {\r\n            get() { return isDestroyed }\r\n        },\r\n        \"destroyList\": { get() { return isValid() && [...destroyList] } },\r\n        \"destroy\": {\r\n            value: (withDom = false) => {\r\n                if (dom instanceof Node && !(dom instanceof DocumentFragment)) {\r\n                    dom.remove()\r\n                }\r\n                if (isDestroyed) return\r\n                handler.destroyList.map(fn => fn instanceof Function && fn(withDom))\r\n                isDestroyed = true\r\n                destroyList = []\r\n                if (dom instanceof Text && withDom) {\r\n                    dom.data = \"\"\r\n                }\r\n                handler.$children.map(el => el instanceof Node && DomController.$(el).destroy())\r\n            },\r\n            writable: false\r\n        },\r\n        \"onCleanup\": {\r\n            get() { return isValid() && onCleanUp },\r\n            set(value) { isValid() && onCleanUp(value) }\r\n        },\r\n        \"$children\": {\r\n            get() { return [...$children] },\r\n            set(value) {\r\n                value = Array.isArray(value) ? value : [value]\r\n                $children.push(...value)\r\n            }\r\n        },\r\n        getTextRoot: {\r\n            value: getTextRoot,\r\n            writable: false\r\n        },\r\n        textRef: {\r\n            get() { return textRef }\r\n        }\r\n\r\n    })\r\n    handler.onConnected(() => {\r\n        if (dom.parentNode) {\r\n            dom.after(root)\r\n        }\r\n    })\r\n    if (dom.isConnected) {\r\n        Promise.resolve().then(() => dispatchConnected(dom.parentElement))\r\n    } else {\r\n        dom.onconnected = () => {\r\n            console.log(\"wala\");\r\n            dispatchConnected(dom.parentElement)\r\n        }\r\n    }\r\n    DATABASE.set(dom, handler)\r\n    return handler\r\n}\r\nexport class DomController {\r\n    static $(dom) {\r\n        return createHandler(dom)\r\n    }\r\n    static children(...children) {\r\n        children = children.flat(Infinity)\r\n        return children\r\n    }\r\n    static getFiberOf(dom) { this.$(dom).getFiber() }\r\n}\r\n","\r\nconst rxErrorConfig={\r\n    lang:\"en\",\r\n    usePrettyLog:false\r\n}\r\n\r\nconst codeLogError= {\r\n    \"fr\":{\r\n        0:data=>\"\",\r\n    },\r\n    \"en\":{\r\n\r\n    }\r\n}\r\nconst CODES=[]\r\nexport function rxError({code,lang={fr:(data)=>\"rxError\",en:(data)=>\"rxError\"}}) {\r\n    if(CODES.includes(code)) throw new Error(\"ce code is already used\")\r\n    if(typeof lang !=\"object\")throw new Error(\"lang must be an object\")\r\n    CODES.push(code)\r\n    Object.entries(lang).map(([name,value])=>{\r\n        codeLogError[name][code]=(data)=>{\r\n            if(!(value instanceof Function)) throw new Error(\"each value of lang must be a function\")\r\n            return value(data)\r\n        }\r\n    })\r\n}\r\nexport function getStack(){\r\n    let stackString=\"\"\r\n    try {\r\n        throw new Error()\r\n    } catch (error) {\r\n        const stacks=error.stack.split(/at\\s(.+)\\s*/).slice(2).filter(e=>e).map(at=>{\r\n            const nameOfFunction=at.slice(0,at.indexOf(\" \"))\r\n            const file=at.slice(at.lastIndexOf(\"/\")+1,-1).split(\":\")\r\n            return {\r\n                at,\r\n                nameOfFunction,\r\n                source:at.slice(at.indexOf(\" \")+1).slice(1,-1),\r\n                fileName:file[0],\r\n                row:file[1],\r\n                col:file[2],\r\n            }\r\n        })\r\n        stacks.at(-1).source=\"h\"+stacks.at(-1).source+error.stack.at(-1)\r\n        stacks.at(-1).nameOfFunction=stacks.at(-1).nameOfFunction+error.stack.at(-1)\r\n        stackString=stacks\r\n    }\r\n    return stackString\r\n}\r\nexport default function getLogError(code=0,data=null){\r\n    try {\r\n        return codeLogError[rxErrorConfig[\"lang\"]][code](data)\r\n    } catch (error) {\r\n        return codeLogError[rxErrorConfig[\"lang\"]][0](data)\r\n    }\r\n}\r\n\r\nrxError({\r\n    code:0,\r\n    lang:{\r\n        fr:(data)=>{\r\n            return `rxError:${data}`\r\n        },\r\n        en:(data)=>{\r\n            return `rxError:${data}`\r\n        }\r\n    }\r\n})","\r\nexport function createRegExp(...regs){\r\n    return regs.reduce((regFinal,reg)=>new RegExp(regFinal.source+reg.source))\r\n}\r\nfunction getRegSource(reg){\r\n    return typeof reg==\"string\"?reg:reg.source\r\n}\r\nexport function combineRegExp(...regs){\r\n    return regs.reduce((regFinal,reg)=>new RegExp(regFinal.source+getRegSource(reg)))\r\n}\r\nexport function combineAndSaveRegExp(...regs){\r\n    return new RegExp(`(${combineRegExp(...regs).source})`)\r\n}\r\nexport function combineAndNoSaveRegExp(...regs){\r\n    return new RegExp(`(?:${combineRegExp(...regs).source})`)\r\n}\r\nexport function createRegExpSaved(...regs){\r\n    return new RegExp(`(${createRegExp(...regs).source})`)\r\n}\r\nexport function createRegExpSplit(...regs){\r\n    return createRegExpSaved(regs.reduce((regFinal,reg)=>new RegExp(regFinal.source+\"|\"+reg.source)))\r\n}","import { createRegExpSplit } from \"./RgExp.js\"\r\n\r\nexport class TemplateRef extends Array {\r\n    static get regExp() { return /\\(_\\|-\\[RXRefs\\{index:\\d+,type:[\\w\\$]+\\}\\]-\\|_\\)/ }\r\n    static get regExpSaved() { return /\\(_\\|-\\[RXRefs\\{index:(?<index>\\d+),type:(?<type>[\\w\\$]+)\\}\\]-\\|_\\)/ }\r\n    static get regExpSavedG() { return /\\(_\\|-\\[RXRefs\\{index:(?<index>\\d+),type:(?<type>[\\w\\$]+)\\}\\]-\\|_\\)/g }\r\n    static {\r\n        this.split = function (chaine = \"\", includeResults = true) {\r\n            if (typeof chaine != \"string\") throw new Error(\"chaine doit etre une chaine de caractere\")\r\n            const reg = includeResults ? createRegExpSplit(this.regExp) : this.regExp\r\n            const result = chaine.split(reg).reduce((l, item) => {\r\n                if (!item) return l\r\n                const r = this.parse(item)\r\n                if (r && includeResults instanceof Function) item = includeResults(r)\r\n                l.push(item)\r\n                return l\r\n            }, [])\r\n            return result\r\n        }\r\n        this.replaceAll = function (chaine, value = \"\") {\r\n            if (typeof chaine != \"string\") throw new Error(\"chaine doit etre une chaine de caractere\")\r\n            return chaine.replaceAll(this.regExpSavedG, (input, index, type) => value instanceof Function ? value({ input, index, type }) : value)\r\n        }\r\n        this.parse = function (chaine = \"\", refs = null) {\r\n            if (typeof chaine != \"string\") throw new Error(\"chaine doit etre une chaine de caractere\")\r\n            const result = /\\(_\\|-\\[RXRefs\\{index:(?<index>\\d+),type:(?<type>[\\w\\$]+)\\}\\]-\\|_\\)/.exec(chaine)\r\n            const value = refs ? this.split(chaine, ({ index }) => refs[index]) : null\r\n            const valueString = value ? value.join('') : \"\"\r\n            return result ? {\r\n                index: result.groups.index,\r\n                type: result.groups.type,\r\n                input: result.input,\r\n                value, valueString, refs\r\n            } : null\r\n        }\r\n    }\r\n    constructor(...refs) {\r\n        super()\r\n        this.push(...refs)\r\n        this.components={}\r\n    }\r\n}","import { useState, RXState, useLayoutEffect, useMemo, useRef } from \"../../hooks/indexHooks.js\"\r\nimport { DomController } from \"../domController.js\"\r\nimport { TemplateRef } from \"../templateRef.js\"\r\n\r\nconst customeElementRegistry = {}\r\n\r\nconst regExpDirective = /^(?<directiveName>(?:[A-z][\\w\\-]*:)|@|#)(?<arg>[\\w-]*)(?<modifiers>\\[[\\w\\-,]*\\])?$/\r\nconst directiveOption = {\r\n    el: null,\r\n    attrName: \"\",\r\n    attrValue: \"\",\r\n    directiveName: \"\",\r\n    arg: \"\",\r\n    modifiers: {},\r\n    index: 0\r\n}\r\nexport class FiberOfNode {\r\n    #components = ({ ...customeElementRegistry })\r\n    get components() { return this.#components }\r\n    set components(components) {\r\n        Object.assign(this.#components, components)\r\n    }\r\n    refs = new TemplateRef()\r\n    directives = {\r\n        $onInit({ attrValue, el} = directiveOption){\r\n            attrValue=attrValue instanceof RXState?attrValue.value:attrValue\r\n            if(attrValue instanceof Function){\r\n                DomController.$(el).onCleanup=attrValue(el)\r\n                return\r\n            }\r\n            console.warn(\"$onInit.attrValue doit être de type Function\")\r\n        },\r\n        $shadowRoot({ attrValue, el, arg } = directiveOption) {\r\n            const elementsCanAttachShadowRoot = [\"article\", \"aside\", \"blockquote\", \"body\", \"div\", \"footer\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"main\", \"nav\", \"p\", \"section\", \"span\"]\r\n            if (elementsCanAttachShadowRoot.includes(el.localName) || el.localName.includes(\"-\")) {\r\n                let callback\r\n                if (attrValue instanceof RXState) attrValue = attrValue.value\r\n                if (attrValue instanceof Function) callback = attrValue\r\n                const oldChildren = [...el.childNodes]\r\n                const root = el.attachShadow({ mode: arg === \"closed\" ? \"closed\" : \"open\" })\r\n                const returnValue = callback instanceof Function ? callback({ el, root, children: oldChildren }) : oldChildren\r\n                const children = Array.isArray(returnValue) ? returnValue : [returnValue]\r\n                el.innerHTML = \"\"\r\n                root.append(...children)\r\n            } else {\r\n                console.warn(`l'element ${el.localName} ne suporte pas le attachShadow. Seule les element personnalisé (balise avec un tiré) et quelque element native le supporte,\r\n                voici une liste d'element qui le support:`, elementsCanAttachShadowRoot);\r\n            }\r\n        },\r\n        $attrState({ attrValue, el, setAttribute } = directiveOption) {\r\n            let cleanup\r\n            if (attrValue instanceof RXState) {\r\n                const update = (name, value) => {\r\n                    if (cleanup instanceof Function) cleanup();\r\n                    cleanup = setAttribute(el, name, value ?? \"\")\r\n                }\r\n                return attrValue.onChange((value, oldValue) => {\r\n                    if (value && typeof value == \"object\") {\r\n                        if (oldValue && typeof oldValue == \"object\") {\r\n                            const isAsOld = value.attrName === oldValue.attrName && value.attrValue === oldValue.attrValue\r\n                            if (!isAsOld) {\r\n                                update(value.attrName, value.attrValue ?? \"\")\r\n                            }\r\n                        } else {\r\n                            update(value.attrName, value.attrValue ?? \"\")\r\n                        }\r\n                    } else {\r\n                        update(value, \"\")\r\n                    }\r\n                    return cleanup\r\n                }, true)\r\n            }\r\n            return setAttribute(el, attrValue, true)\r\n        },\r\n        $if({ attrValue, el, index, data ,arg} = directiveOption) {\r\n            index = Math.random()\r\n            if (typeof data.listCondition != \"object\") data.listCondition = {}\r\n            const getValue = (value) => value instanceof Function ? value(el) : !!value\r\n            const hasValidNow=()=>Object.values(data.listCondition).every(isTrue => isTrue)\r\n            // const makeVisible = (isVisible = hasValidNow()) => el.getTextRoot()\r\n            const makeVisible = (isVisible = hasValidNow()) =>DomController.$(el).getTextRoot()\r\n                .then(textRef => {\r\n                    if(!textRef.parentNode){\r\n                        // return el.onConnected(()=>el.getTextRoot().then(()=>hasValidNow() ? textRef.after(el) : el.remove()))\r\n                        return DomController.$(el).onConnected(()=>DomController.$(el).getTextRoot().then(()=>hasValidNow() ? textRef.after(el) : el.remove()))\r\n                    }\r\n                    return textRef.parentNode && isVisible ? textRef.after(el) : el.remove()\r\n                })\r\n            if (attrValue instanceof RXState) {\r\n                return attrValue.onChange((value) => {\r\n                    const v=getValue(value)\r\n                    data.listCondition[index] =arg==\"false\"?!v:v\r\n                    makeVisible()\r\n                    return () => {\r\n                        delete data.listCondition[index]\r\n                        attrValue.destroy(true)\r\n                    }\r\n                }, true)\r\n            } else {\r\n                data.listCondition[index] = getValue(attrValue)\r\n                makeVisible()\r\n            }\r\n            return () => data.listCondition[index] = true\r\n        },\r\n        $ref({ el, attrValue } = directiveOption) {\r\n            if (attrValue instanceof RXState) {\r\n                attrValue=attrValue.value\r\n            }\r\n            if (attrValue instanceof Function) {\r\n                return attrValue(el)\r\n            }else if (useRef.isRef(attrValue)){\r\n                attrValue.current=el\r\n            }\r\n        },\r\n        $show({ el: dom, attrValue } = directiveOption) {\r\n            if (attrValue instanceof RXState) {\r\n                return attrValue.onChange((isShow) => {\r\n                    dom.hidden = !isShow\r\n                    return () => attrValue.destroy(true)\r\n                }, true)\r\n            } else {\r\n                dom.hidden = !attrValue\r\n            }\r\n        },\r\n        $bind({ el, arg, modifiers, attrValue } = directiveOption) {\r\n            const fnRmvs = []\r\n            if (attrValue instanceof RXState) {\r\n                fnRmvs.push(attrValue.onChange((v) => {\r\n                    if (arg in el) {\r\n                        el[arg] = v\r\n                    } else {\r\n                        el.setAttribute(arg, v)\r\n                    }\r\n                    return () => attrValue.destroy(true)\r\n                }, true))\r\n            }\r\n            const handlerEvent = () => {\r\n                const value = arg in el ? el[arg] : el.getAttribute(arg)\r\n                if (attrValue instanceof RXState) attrValue.set(value)\r\n            }\r\n            fnRmvs.push(...Object.keys(modifiers).map(eventName => {\r\n                el.addEventListener(eventName, handlerEvent)\r\n                return () => el.removeEventListener(eventName, handlerEvent)\r\n            }))\r\n            if (Object.keys(modifiers).length == 0) {\r\n                const eventName = [\"input\"].includes(el.localName) ? \"input\" : \"change\"\r\n                el.addEventListener(eventName, handlerEvent)\r\n                fnRmvs.push(() => el.removeEventListener(eventName, handlerEvent))\r\n            }\r\n            return () => fnRmvs.map(fn => fn())\r\n        },\r\n        $directives({ el, arg, modifiers, attrValue } = directiveOption) {\r\n            if (attrValue instanceof RXState) attrValue = attrValue.value\r\n            if (typeof attrValue == \"object\") {\r\n                Object.assign(this, attrValue)\r\n            }\r\n        }\r\n    }\r\n    initProps(refs = this.refs) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        const getrefs = ({ index }) => this.refs[index]\r\n        const generateKey = (data, key) => {\r\n            const gk = () => {\r\n                let i = Math.round(Math.random() * 100_000_000)\r\n                while ((key + `<${i}>`) in data) { i++ }\r\n                key += `<${i}>`\r\n                return key\r\n            }\r\n            if (key in data) {\r\n                if (key.includes(\"<\") && key.includes(\">\") && key.at(-1) == \">\") {\r\n                    const indexA = key.indexOf(\"<\")\r\n                    key = key.slice(0, indexA)\r\n                }\r\n                return gk()\r\n            }\r\n            return key\r\n        }\r\n        this.props = Object.entries(this.props).reduce((props, [attrName, value]) => {\r\n            const originalAttrName = attrName\r\n            const attrNameComputed = TemplateRef.parse(attrName, this.refs)\r\n            const valueArray = typeof value == \"string\" ? TemplateRef.split(value ?? \"\", getrefs) : [value]\r\n\r\n\r\n            if (/^\\s*$/.test(valueArray[0]) && !(valueArray[0] instanceof RXState)) valueArray.shift()\r\n            if (/^\\s*$/.test(valueArray.at(-1)) && !(valueArray[0] instanceof RXState)) valueArray.pop()\r\n\r\n            let hasValueFinal = false\r\n            let valueFinal\r\n            const getValue = () => {\r\n                if (hasValueFinal) return valueFinal\r\n                hasValueFinal = true\r\n                if (valueArray.length == 0) {\r\n                    valueFinal = \"\"\r\n                    return \"\"\r\n                }\r\n                if (valueArray.length == 1) {\r\n                    valueFinal = valueArray[0]\r\n                    return valueArray[0]\r\n                }\r\n                const stateValue = useMemo(() => valueArray.join(\"\") , valueArray)\r\n                valueFinal = stateValue\r\n                return stateValue\r\n            }\r\n            if (attrNameComputed) {\r\n                let hasCallback = false\r\n                const hasState = !!attrNameComputed.value.find(v => {\r\n                    if (v instanceof Function) {\r\n                        hasCallback = true\r\n                    }\r\n                    return v instanceof RXState\r\n                })\r\n                const isDirective = attrNameComputed.value[0] == \"$\" && attrNameComputed.value[1] instanceof Function\r\n                const createMemo = () => useMemo(() => ({\r\n                    attrName: attrNameComputed.value.map(v => v instanceof Function ? v.name : v instanceof RXState ? v.toString() : typeof v == \"object\" ? v?.constructor?.name : v).join(\"\"),\r\n                    attrValue: getValue()\r\n                }), [...attrNameComputed.value])\r\n\r\n                if (isDirective) {\r\n                    const callback = attrNameComputed.value[1]\r\n                    const id = Math.round(Math.random() * 1_000_000)\r\n                    const callbackName = (callback.name[0] == \"$\" ? callback.name : \"$\" + callback.name) + \"{\" + id + \"}\"\r\n                    this.directives[callbackName] = callback\r\n                    let key = \"$attrState\"\r\n                    key = generateKey(props, key)\r\n                    attrNameComputed.value[0] = \"\"\r\n                    attrNameComputed.value[1] = callbackName\r\n                    const attr = createMemo()\r\n                    props[key] = attr\r\n                    return props\r\n                } else if (hasState) {\r\n                    let key = \"$attrState\"\r\n                    key = generateKey(props, key)\r\n                    const attr = createMemo()\r\n                    props[key] = attr\r\n                    return props\r\n                } else if (hasCallback) {\r\n                    const lnc = [...attrNameComputed.value] // list Name Computed\r\n                    if (lnc[0] instanceof Function && lnc.length == 1) {\r\n                        let key = \"$onInit\"\r\n                        key = generateKey(props, key)\r\n                        props[key] = lnc[0]\r\n                        return props\r\n                    } else {\r\n                        let key = [...attrNameComputed.value].map(v => v instanceof Function ? v.name : v).join(\"\")\r\n                        key = generateKey(props, key)\r\n                        props[key] = getValue()\r\n                        return props\r\n                    }\r\n                } else if (attrNameComputed.value[0] instanceof Object && attrNameComputed.value.length === 1) {\r\n                    if (value != \"\") return props\r\n                    if (attrNameComputed.value[0].constructor !== Object) return props\r\n                    Object.entries(attrNameComputed.value[0]).map(([k, v]) => {\r\n                        k = generateKey(props, k)\r\n                        props[k] = v\r\n                    })\r\n                    return props\r\n                } else {\r\n                    attrName = attrNameComputed.valueString\r\n                }\r\n            }\r\n            let ismustState=false\r\n            if(attrName[0]==\":\"){\r\n                ismustState=true\r\n                attrName=attrName.slice(1)\r\n            }\r\n            if (attrName == \"children\") {\r\n                props.children = value\r\n                return props\r\n            }\r\n            attrName = generateKey(props, attrName)\r\n            props[attrName] = ismustState?useMemo(()=>getValue()):getValue()\r\n            return props\r\n        }, {})\r\n    }\r\n    constructor() {}\r\n    type\r\n    props\r\n    #dom\r\n    #parent\r\n    get parent(){return this.#parent}\r\n    set parent(parentFiber){\r\n        if(!(parentFiber instanceof FiberOfNode)) throw new Error('parentFiber doit être une instance FiberOfNode')\r\n        this.#parent=parentFiber\r\n    }\r\n    get dom(){\r\n        return this.#dom\r\n    }\r\n    set dom(domValue){\r\n        if(this.#dom) throw new Error(\"dom a déja une valeur Node \")\r\n        if(!(domValue instanceof Node)) throw new Error(\"domValue doit être une instance de Node\")\r\n        this.#dom=domValue\r\n    }\r\n}\r\nexport { customeElementRegistry }","import {TemplateRef} from \"../templateRef.js\"\r\nimport {FiberOfNode} from \"./FiberOfNode.js\"\r\n\r\nexport class FiberOfElement extends FiberOfNode {\r\n    constructor(type, props = {}, refs=new TemplateRef()) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        super()\r\n        this.type = type\r\n        this.refs = refs\r\n        this.props = Object.freeze({\r\n            ...props,\r\n            children: props.children?? []\r\n        })\r\n        this.props.children.map((child,index)=>{\r\n            if(child instanceof DocumentFragment){\r\n                this.props.children[index]=[...child.$children]\r\n            }\r\n        })\r\n        this.initProps(this.refs)\r\n        this.components=this.refs.components\r\n        if(this.components[type]){\r\n            this.type=this.components[type]\r\n        }\r\n        Object.freeze(this)\r\n    }\r\n}","import { TemplateRef } from \"../templateRef.js\"\r\nimport {FiberOfNode} from \"./FiberOfNode.js\"\r\n\r\nexport class FiberOfFragment extends FiberOfNode {\r\n    constructor(children, refs=new TemplateRef()) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        super()\r\n        this.refs = refs\r\n        this.type = \"FRAGMENT\"\r\n        this.props = Object.freeze({\r\n            children:children ?? []\r\n        })\r\n        this.initProps(this.refs)\r\n        Object.freeze(this)\r\n    }\r\n}","import { TemplateRef } from \"../templateRef.js\"\r\nimport {FiberOfNode} from \"./FiberOfNode.js\"\r\n\r\nexport class FiberOfText extends FiberOfNode {\r\n    constructor(text, refs=new TemplateRef()) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        super()\r\n        this.refs = refs\r\n        this.type = \"TEXT\"\r\n        this.props = Object.freeze({\r\n            nodeValue: text,\r\n            children: []\r\n        })\r\n        Object.freeze(this)\r\n        if(this.props.nodeValue instanceof Node ) {\r\n            if(this.props.nodeValue instanceof DocumentFragment){\r\n                console.log([...this.props.nodeValue.$children]);\r\n            }\r\n            return this.props.nodeValue\r\n        }\r\n        if (this.props.nodeValue instanceof FiberOfNode) return this.props.nodeValue\r\n    }\r\n}","import { useEvent, RXState } from \"../hooks/indexHooks.js\"\r\nimport { DomController } from \"./domController.js\"\r\nimport { getStack } from \"./rxError.js\"\r\n\r\nimport { FiberOfElement, FiberOfFragment, FiberOfNode, FiberOfText } from \"./RxFiber/indexOfFiber.js\"\r\nimport { TemplateRef } from \"./templateRef.js\"\r\n\r\nconst needCallback = (callback, args, $this) => callback.apply($this, args)\r\nneedCallback.after = (callback, args, $this) => Promise.resolve().then(() => callback.apply($this, args))\r\nneedCallback.idle = (callback, args, $this) => requestIdleCallback(() => callback.apply($this, args))\r\n\r\n\r\nfunction createElement(fiber) {\r\n    const sendListOfDom = (list) => list.flat(Infinity).map(child => createDom(child))\r\n    if (fiber instanceof Node) return fiber\r\n    if (fiber instanceof FiberOfNode && fiber.dom instanceof Node) return fiber.dom\r\n    if (fiber instanceof FiberOfFragment) {\r\n        return sendListOfDom(fiber.props.children)\r\n    }\r\n    if (fiber instanceof FiberOfText) {\r\n        if (Array.isArray(fiber.props.nodeValue)) {\r\n            return sendListOfDom(fiber.props.nodeValue)\r\n        }\r\n        return fiber.props.nodeValue instanceof Node ? fiber.props.nodeValue : new Text(fiber.props.nodeValue)\r\n    }\r\n    if (fiber instanceof FiberOfElement) {\r\n        if (fiber.components[fiber.type] instanceof Function) {\r\n            const component = fiber.components[fiber.type]\r\n            fiber.type = component\r\n        }\r\n        if (fiber.type instanceof Function) {\r\n            let props = fiber.props\r\n            if (typeof fiber.type.defaultProps == \"object\") props = { ...fiber.type.defaultProps, ...props }\r\n            const el = fiber.type(props)\r\n            return createDom(el)\r\n        }\r\n        return document.createElement(fiber.type)\r\n    }\r\n    if (Array.isArray(fiber)) {\r\n        return sendListOfDom(fiber)\r\n    }\r\n    if (fiber instanceof Function) {\r\n        let props = { children: [] }\r\n        if (typeof fiber.defaultProps == \"object\") props = { ...fiber.defaultProps, children: [] }\r\n        return createDom(fiber(props))\r\n    }\r\n    if (fiber instanceof RXState) {\r\n        return createDom(new FiberOfText(fiber, new TemplateRef()))\r\n    }\r\n    try {\r\n        return new Text(JSON.stringify(fiber))\r\n    } catch (error) {\r\n        return new Text(fiber)\r\n    }\r\n}\r\nfunction initProps(dom, fiber) {\r\n    if (!(dom instanceof Node)) throw new Error('dom doit etre un element node')\r\n    if (!(dom instanceof HTMLElement)) return null\r\n    if (fiber && fiber.type instanceof Function) return null;\r\n    if (!(fiber instanceof FiberOfElement)) return null\r\n    const globalData = {}\r\n    const counterName = {}\r\n    \r\n    const setOneAttribute = (props, [attrName, attrValue], dom, listOnCleanup = []) => {\r\n        const setAttribute = (value, domEl = dom, attrN = attrName) => {\r\n            if (/^\\s*$/.test(attrN)) return\r\n            if (domEl instanceof HTMLSelectElement && [\"multiple\",].includes(attrN)) {\r\n                domEl.multiple = true\r\n            } else\r\n                if ([\"disabled\", \"hidden\"].includes(attrN)) {\r\n                    // console.log(value);\r\n                    // domEl.setAttribute(attrN,\"\")\r\n                    return domEl[attrN] = value === \"\" ? true : value\r\n                } else if ((attrN in domEl) || ([\"object\", \"function\"].includes(typeof value))) {\r\n                    if (typeof value == \"object\" && typeof domEl[attrN] == \"object\") return Object.assign(domEl[attrN], value)\r\n                    return domEl[attrN] = value\r\n                }\r\n            domEl.setAttribute(attrN, value)\r\n        }\r\n        const setAttr = (el, attrName, attrValue) => {\r\n            const listrmv = []\r\n            setOneAttribute(props, [attrName, attrValue], el, listrmv)\r\n            return () => needCallback(() => listrmv.map(fn => fn instanceof Function && fn()/** */))\r\n        }\r\n        const rendAttribute = (update, onRemove) => {\r\n            const redOneStyle = (value) => {\r\n                if (value instanceof RXState) {\r\n                    // dom.onCleanup = value.onChange((val, oldVal) => {\r\n                    DomController.$(dom).onCleanup = value.onChange((val, oldVal) => {\r\n                        update(val, oldVal)\r\n                        return () => value.destroy()\r\n                    }, true)\r\n                } else {\r\n                    update(value)\r\n                }\r\n            }\r\n            if (Array.isArray(attrValue)) {\r\n                attrValue.map(val => redOneStyle(val))\r\n            } else {\r\n                redOneStyle(attrValue)\r\n            }\r\n            DomController.$(dom).onCleanup = () => onRemove instanceof Function && onRemove()\r\n        }\r\n        const toClean = () => null\r\n        let cleanup = toClean\r\n        let resultReg\r\n        const rcState = attrValue\r\n        const originalAttrName = attrName\r\n        const res = /^([^<>]+)<\\d+>$/.exec(attrName)\r\n        if (res) { attrName = res[1] }\r\n        if (attrName == \"children\" || !(fiber instanceof FiberOfElement)) return props\r\n        if (typeof attrName != \"string\") return props\r\n\r\n        if (attrName && (attrName.startsWith('on') || attrName.startsWith('@'))) {\r\n\r\n            let type = attrName.slice(attrName.startsWith('on') ? 2 : 1).toLowerCase()\r\n            if (type.indexOf(\"<\") > -1) {\r\n                type = type.slice(0, type.indexOf(\"<\"))\r\n            }\r\n            const applyCallback = (fn, args = []) => {\r\n                if (fn instanceof RXState) {\r\n                    fn = fn.isDestroyed ? () => null : fn.value\r\n                }\r\n                return fn(...args)\r\n            }\r\n            const callback = (...args) => {\r\n                if (Array.isArray(attrValue)) {\r\n                    return attrValue.map(fn => applyCallback(fn, args))\r\n                }\r\n                applyCallback(attrValue, args)\r\n            }\r\n            let removeEv = () => dom.removeEventListener(type, callback)\r\n            DomController.$(dom).onCleanup(removeEv)\r\n            // dom.onDestroy(removeEv)\r\n            dom.addEventListener(type, callback)\r\n            cleanup = () => removeEv\r\n            return props\r\n        } else if (attrName[0] == \".\") {\r\n            const oldValue = dom[attrName.slice(1)]\r\n            dom[attrName.slice(1)] = attrValue\r\n            cleanup = () => dom[attrName.slice(1)] = oldValue\r\n            return props\r\n        } else if (resultReg = /^(?<name>(?:\\$|\\:)[^\\s</>\\:\\[\\]]+)(?:\\:(?<arg>[^\\s</>:\\[\\]]*)(\\[(?<modifiers>[^\\s</>\\[\\]]*)\\])?)?(?:\\<(?<index>\\d+)\\>)?$/.exec(attrName)) {\r\n            const { name, arg, modifiers } = resultReg.groups\r\n            counterName[name] = name in counterName ? counterName[name] + 1 : 0\r\n            if (fiber.directives[name] instanceof Function) {\r\n                let index = counterName[name]\r\n                const directivesMustSync = [\"$ref\"]\r\n                const callback = directivesMustSync.includes(name) ? needCallback : needCallback.after\r\n                callback(() => {\r\n                    if (!globalData[name]) globalData[name] = {}\r\n                    const rmv = fiber.directives[name]({\r\n                        setAttribute: setAttr,\r\n                        globalData,\r\n                        data: globalData[name],\r\n                        el: dom, attrName, attrValue,\r\n                        index: index ? Number(index) : 0,\r\n                        directiveName: name, arg,\r\n                        modifiers: modifiers?.split(',').reduce((data, modif) => { data[modif] = true; return data }, {}) || {}\r\n                    })\r\n                    if (rmv instanceof Function) {\r\n                        // dom.onDestroy(rmv)\r\n                        DomController.$(dom).onCleanup(rmv)\r\n                        cleanup = rmv\r\n                        listOnCleanup.push(cleanup)\r\n                    }\r\n                })\r\n            }\r\n            return props\r\n        } else if ([\"input\", \"select\", \"textarea\"].includes(dom.localName) && [\"value\", \"checked\"].includes(attrName) && (rcState instanceof RXState)) {\r\n            if ([\"select\"].includes(dom.localName) && dom instanceof HTMLSelectElement) {\r\n                dom.value = rcState.value\r\n                // dom.onReady(()=>{\r\n                DomController.$(dom).onReady(() => {\r\n                    dom.selectedIndex = -1\r\n                    let i = -1\r\n                    for (let opt of dom) {\r\n                        i++\r\n                        if (opt.value === rcState.value) {\r\n                            dom.selectedIndex = i\r\n                        }\r\n                    }\r\n                })\r\n                // dom.selectedIndex=2\r\n            }\r\n            const rmv = (e) => needCallback.after(() => {\r\n\r\n                if ([\"checkbox\"].includes(e.target.type)) {\r\n                    return rcState.set(e.target.checked)\r\n                }\r\n                return rcState.set(e.target[attrName])\r\n            })\r\n            dom.addEventListener('input', rmv)\r\n            cleanup = () => {\r\n                dom.removeEventListener(\"input\", rmv)\r\n                dom.value = \"\"\r\n            }\r\n            // dom.onDestroy(cleanup)\r\n            DomController.$(dom).onCleanup(cleanup)\r\n        } else if (attrName == \"style\" || /^style<\\d+>/.test(attrName)) {\r\n            const styleDefault = dom.style.cssText\r\n            const rendStyle = (value) => needCallback.after(() => {\r\n                if (value instanceof Object) {\r\n                    Object.assign(dom.style, value)\r\n                } else {\r\n                    dom.style.cssText += value\r\n                }\r\n            })\r\n            rendAttribute(rendStyle, () => rendStyle(styleDefault))\r\n            return props\r\n        } else if (attrName == \"class\" || /^class\\<\\d+\\>/.test(attrName)) {\r\n            const styleDefault = dom.getAttribute(\"class\")\r\n\r\n            const rendClass = (value, oldValue) => needCallback.after(() => {\r\n                const addValue = (_value) => String(_value).split(\" \").map(val => val && dom.classList.add(val))\r\n                const removeValue = (_value) => String(_value).split(\" \").map(val => val && dom.classList.remove(val))\r\n                Array.isArray(oldValue) ? oldValue.map(val => removeValue(val)) : removeValue(oldValue);\r\n                Array.isArray(value) ? value.map(val => addValue(val)) : addValue(value)\r\n            })\r\n            rendAttribute(rendClass, () => rendClass(styleDefault))\r\n            return props\r\n        } else if (attrName && attrName.startsWith('?')) {\r\n            attrName = /^([^<>]+)\\<\\d+\\>/.test(attrName) ? attrName.slice(0, attrName.indexOf(\"<\")) : attrName\r\n            if (!attrValue) return props\r\n            let rmvAttr//=setAttr(dom,attrName.slice(1),\"\")\r\n            const insertAttr = (value) => {\r\n                const inertAttr = (v) => setAttr(dom, attrName.slice(1), v)\r\n                if (typeof attrValue == \"object\") {\r\n                    const { when, value: val } = value\r\n                    if (when instanceof RXState) {\r\n                        let rmAt\r\n                        return when.onChange((isTrue) => {\r\n                            if (isTrue) {\r\n                                if (!rmAt) rmAt = inertAttr(val instanceof RXState ? val.get() : val)\r\n                            } else {\r\n                                if (rmAt) rmAt();\r\n                                rmAt = null\r\n                            }\r\n                            return () => rmAt && rmAt();\r\n                        }, true)\r\n                    } else {\r\n\r\n                        if (when) return inertAttr(val)\r\n                    }\r\n                } else {\r\n                    return inertAttr(value)\r\n                }\r\n            }\r\n            if (attrValue instanceof RXState) {\r\n\r\n            } else {\r\n                rmvAttr = insertAttr(attrValue)\r\n            }\r\n\r\n            const rmv = () => rmvAttr()\r\n            if (rmv instanceof Function) {\r\n                dom.onDestroy(rmv)\r\n                cleanup = rmv\r\n                listOnCleanup.push(cleanup)\r\n            }\r\n            return props\r\n        }\r\n        if (attrValue instanceof RXState) {\r\n            const state = attrValue\r\n            const clean = state.onChange(v => {\r\n                setAttribute(v)\r\n                return () => {\r\n                    state.destroy(true)\r\n                    dom.removeAttribute(attrName)\r\n                }\r\n            })\r\n            // dom.onDestroy(clean)\r\n            DomController.$(dom).onCleanup(clean)\r\n            attrValue = attrValue.value\r\n            listOnCleanup.push(clean)\r\n        }\r\n\r\n        setAttribute(attrValue)\r\n        if (cleanup === toClean) {\r\n            cleanup = () => {\r\n                dom.removeAttribute(attrName)\r\n            }\r\n        }\r\n        listOnCleanup.push(cleanup)\r\n        return props\r\n    }\r\n    Object.entries(fiber.props).reduce((props, [attrName, attrValue]) => setOneAttribute(props, [attrName, attrValue], dom), {})\r\n}\r\nconst updateArray = {\r\n    set(valueOfState, oldValueOfState, { methode, value, textRef, listElement }) {\r\n        if (!Array.isArray(listElement)) throw new Error(\"listElement doit être une Array\")\r\n        if (!Array.isArray(valueOfState)) throw new Error(\"valueOfState doit être une Array\")\r\n        textRef.$firstElement = listElement[0]\r\n        if (valueOfState.every(v => v instanceof Node)) {\r\n            const listDom = []\r\n            listElement.splice(0, listElement.length, ...valueOfState.map((item, indexItem) => {\r\n                const dom = createDom(item)\r\n                if (indexItem == 0) {\r\n                    if (textRef.$firstElement !== dom) {\r\n                        textRef.$firstElement = dom\r\n                        textRef.after(dom)\r\n                    }\r\n                } else if (listElement[indexItem] !== dom) {\r\n                    listDom.at(-1).after(dom)\r\n                } else { }\r\n                listDom.push(dom)\r\n                return dom\r\n            })).map(e => !listElement.find(_e => _e === e) && DomController.$(e).destroy(true))\r\n        } else {\r\n            listElement.splice(0, listElement.length, ...valueOfState.map(v => {\r\n                const dom = createDom(v)\r\n                textRef.before(dom)\r\n                return dom\r\n            })).map(e => DomController.$(e).destroy())\r\n        }\r\n    }\r\n}\r\nfunction updateDataBinding(state, textDom, dom, listElement) {\r\n    const remove = state.onChange((valueOfState, oldValueOfState, { methode, value, ...option }) => {\r\n        oldValueOfState instanceof Node && valueOfState !== oldValueOfState && oldValueOfState.destroy(true)\r\n\r\n        if (valueOfState instanceof Node) {\r\n            listElement.splice(0, listElement.length).map(el => el instanceof Node && el.destroy())\r\n            textDom.data = \"\"\r\n            needCallback.idle(() => textDom.after(valueOfState))\r\n            listElement.push(valueOfState)\r\n        } else {\r\n            textDom.data = valueOfState\r\n            if (Array.isArray(valueOfState)) {\r\n                textDom.data = \"\"\r\n                const args = [valueOfState, oldValueOfState, { ...option, methode, value, listElement, textRef: textDom }]\r\n                needCallback.after(() => {\r\n                    if (updateArray[methode] instanceof Function) {\r\n                        updateArray[methode](...args)\r\n                    } else {\r\n                        updateArray.set(...args)\r\n                    }\r\n                })\r\n            } else if (valueOfState instanceof FiberOfNode) {\r\n                textDom.data = \"\"\r\n                let isUpdate = true\r\n                // console.log(isUpdate);\r\n                listElement.splice(0, listElement.length).map(el => el instanceof Node && el.destroy())\r\n                isUpdate = false\r\n                const el = createDom(valueOfState)\r\n                listElement.push(el)\r\n                el.onDestroy(() => listElement.length && remove())\r\n                let isRended = false\r\n                const putAfter = (elRef, elTarget, isforced = false) => {\r\n                    if (isRended && !isforced) return true\r\n                    if (elRef.parentNode) {\r\n                        elRef.after(elTarget)\r\n                        isRended = true\r\n                        return true\r\n                    }\r\n                    return false\r\n                }\r\n\r\n                const rendLater = () => {\r\n                    putAfter(textDom, el)\r\n                    if (!isRended) return requestIdleCallback(rendLater)\r\n                }\r\n                requestIdleCallback(rendLater)\r\n                textDom.onConnected((p) => {\r\n                    if (p instanceof Node && textDom.parentNode !== p) {\r\n                        p.append(textDom)\r\n                        return putAfter(textDom, el, true)\r\n                    }\r\n                    putAfter(textDom, el)\r\n                })\r\n            } else if (typeof valueOfState == \"object\") {\r\n                try {\r\n                    textDom.data = JSON.stringify(valueOfState, null, 20)\r\n                } catch (error) { }\r\n            }\r\n        }\r\n        return (withDom = true) => {\r\n            textDom.data = \"\"\r\n            listElement.map(dom => dom.destroy(withDom))\r\n            if (oldValueOfState instanceof Node) {\r\n                oldValueOfState.destroy()\r\n            }\r\n            if (withDom) {\r\n                textDom.remove()\r\n                state.destroy(true)\r\n            }\r\n        }\r\n    }, true)\r\n    // dom.onDestroy(remove)\r\n    DomController.$(dom).onCleanup(remove)\r\n}\r\nfunction bindData(textDom, textFiber) {\r\n    if (!(textFiber.props.nodeValue instanceof RXState)) return textDom\r\n    let state = textFiber.props.nodeValue\r\n    const dom = Array.isArray(state.value) ? new DocumentFragment() : textDom\r\n    textFiber.dom = dom\r\n    // insertEventDom(dom)\r\n    if (Array.isArray(state.value)) dom.append(textDom)\r\n\r\n    if (!(textDom instanceof Text)) throw new Error(\"textDom doit être une instance de Text\")\r\n    // if (!(textDom.onDestroy instanceof Function)) throw new Error(\"textDom.onDestroy doit être une fonction\")\r\n\r\n    let listElement = []\r\n    // updateDataBinding(state, textDom, dom, listElement)\r\n    needCallback.after(() => updateDataBinding(state, textDom, dom, listElement))\r\n\r\n    return dom\r\n}\r\nfunction insertEventDom(dom) {\r\n    console.warn(123);\r\n    throw new Error(\"the function insertEventDom is deprecied..., Please use insertEventDom.$(dom)\")\r\n    if (!(dom instanceof Node)) throw new Error(\"dom doit etre un instance de Node\")\r\n    if (dom.destroy instanceof Function) return;\r\n    useEvent\r\n    let isDestroyed = false\r\n    let destroyList = []\r\n    const [onReady, dispatchReady] = useEvent({ clearAfterEachDispatch: true })\r\n    const [onConnected, dispatchConnected] = useEvent({ clearAfterEachDispatch: true })\r\n    let isReady = false\r\n    onReady(() => isReady = true)\r\n    const $children = [...dom.childNodes]\r\n    const textRef = new Text()\r\n    const root = new Text()\r\n    const getTextRoot = () => Promise.resolve().then(() => {\r\n        if (dom.parentNode) {\r\n            dom.after(textRef)\r\n            dom.after(root)\r\n        } else if (root.parentNode) {\r\n            root.after(textRef)\r\n        }\r\n        return textRef\r\n    })\r\n    Object.defineProperties(dom, {\r\n        \"onConnected\": {\r\n            get: () => onConnected,\r\n            set: val => onConnected(val)\r\n        },\r\n        \"onReady\": {\r\n            get: () => onReady,\r\n            set: val => onReady(val)\r\n        },\r\n        \"isReady\": {\r\n            get: () => isReady,\r\n        },\r\n        \"dispatchReady\": {\r\n            get: () => dispatchReady,\r\n        },\r\n        \"dispatchConnected\": {\r\n            get: () => dispatchConnected\r\n        },\r\n        \"model\": {},\r\n        isDestroyed: {\r\n            get() { return isDestroyed }\r\n        },\r\n        isClean: {\r\n            get() { return isDestroyed }\r\n        },\r\n        \"destroyList\": { get() { return [...destroyList] } },\r\n        \"onDestroy\": {\r\n            value: (callback) => {\r\n                if (callback instanceof RXState && callback.value instanceof Function) {\r\n                    const state = callback\r\n                    callback = (...args) => {\r\n                        if (!(state.value instanceof Function)) throw new Error(\"state.value doit etre une function\")\r\n                        state.value(...args)\r\n                    }\r\n                } else if (Array.isArray(callback)) {\r\n                    callback.map(fn => dom.onDestroy(fn))\r\n                    return\r\n                }\r\n                if ((callback instanceof Function)) {\r\n                    destroyList.push(callback)\r\n                }\r\n            },\r\n            writable: false\r\n        },\r\n        \"destroy\": {\r\n            value: (withDom = false) => {\r\n                if (dom instanceof Node && !(dom instanceof DocumentFragment)) {\r\n                    dom.remove()\r\n                }\r\n                if (isDestroyed) return\r\n                dom.destroyList.map(fn => fn(withDom))\r\n                isDestroyed = true\r\n                destroyList = []\r\n                if (dom instanceof Text && withDom) {\r\n                    dom.data = \"\"\r\n                }\r\n                dom.$children.map(el => el instanceof Node && el.destroy())\r\n            },\r\n            writable: false\r\n        },\r\n        \"onCleanup\": {\r\n            get() { return dom.onDestroy },\r\n            set(value) { dom.onDestroy(value) }\r\n        },\r\n        \"$children\": {\r\n            get() { return $children },\r\n            set(value) {\r\n                value = Array.isArray(value) ? value : [value]\r\n                $children.push(...value)\r\n            }\r\n        },\r\n        getTextRoot: {\r\n            value: getTextRoot,\r\n            writable: false\r\n        },\r\n        textRef: {\r\n            get() { return textRef }\r\n        }\r\n\r\n    })\r\n    dom.onConnected(() => {\r\n        if (dom.parentNode) {\r\n            dom.after(root)\r\n        }\r\n    })\r\n}\r\n\r\nconst listOfTagPriority = [\"style\", \"link\"]\r\nconst isRendPriority = (element, container) => {\r\n    if (listOfTagPriority.includes(String(element?.type).toLowerCase())) return true\r\n    if (listOfTagPriority.includes(container.localName)) return true\r\n}\r\nfunction createTextRef(container) {\r\n    if (!(container instanceof Node)) throw new Error(\"container doit être de type Node\")\r\n    const txtRef = new Text(\"\")\r\n    if (container.shadowRoot) {\r\n        container.shadowRoot.append(txtRef)\r\n    } else {\r\n        container.append(txtRef)\r\n    }\r\n    return txtRef\r\n}\r\nexport function render(element, container = document.body) {\r\n    if (typeof container == \"string\") container = document.querySelector(container)\r\n    if (!(container instanceof Node)) throw new Error(\"container doit être de type Node\")\r\n    let returnDom\r\n    const txtRef = createTextRef(container)\r\n    function appendChild(dom) {\r\n        if (Array.isArray(dom)) {\r\n            returnDom = dom.map(child => render(child, container))\r\n            return returnDom\r\n        }\r\n        // insertEventDom(dom)\r\n        // insertEventDom(container)\r\n        DomController.$(container).onCleanup(DomController.$(dom).onCleanup)\r\n        // container.onDestroy(dom.destroy)\r\n        const append = () => {\r\n            txtRef.after(dom)\r\n            // if (container instanceof DocumentFragment) container.$children = dom;\r\n            DomController.$(container).$children = dom\r\n            DomController.$(dom).dispatchConnected(container)\r\n            // dom.dispatchConnected(container)\r\n        }\r\n        append()\r\n        txtRef.remove()\r\n        returnDom = dom\r\n    }\r\n    async function init() {\r\n        if (returnDom) return returnDom\r\n        if (!(container instanceof Node)) throw new Error(\"container doit etre un instance de Node\")\r\n        const dom = await needCallback.after(() => createDom(element))\r\n        appendChild(dom)\r\n        return returnDom\r\n    }\r\n    if (isRendPriority(element, container)) {\r\n        const dom = createDom(element)\r\n        appendChild(dom)\r\n    }\r\n    return init()\r\n}\r\n\r\nexport function createDom(fiber) {\r\n    if (fiber instanceof FiberOfNode && fiber.dom instanceof Node) {\r\n        throw new Error(\"fibre a déja une instance dom, fais une copie du fibre si vous voulez une autre instance\")\r\n    }\r\n    if (Array.isArray(fiber)) {\r\n        // fiber=new FiberOfFragment(fiber)\r\n        return fiber.flat(Infinity).map(child => createDom(child))\r\n    } else if (fiber instanceof Function) {\r\n        fiber = new FiberOfElement(fiber, { children: [] })\r\n    } else if (!(fiber instanceof EventTarget) && !(fiber instanceof FiberOfNode)) {\r\n        fiber = new FiberOfText(fiber)\r\n    }\r\n    const dom = createElement(fiber)\r\n    if (fiber instanceof FiberOfNode && dom instanceof Node && !(dom.fiber instanceof FiberOfNode)) {\r\n        Object.defineProperty(dom, \"fiber\", {\r\n            get: () => fiber\r\n        })\r\n    }\r\n\r\n    const createChild = (childDom) => {\r\n        // insertEventDom(childDom)\r\n        // const handlerDom=DomController.$(childDom)\r\n        if (fiber instanceof Node) return childDom\r\n        if (fiber instanceof FiberOfText && RXState.isState(fiber.props.nodeValue)) return bindData(childDom, fiber)\r\n        if (fiber && fiber.type instanceof Function) return childDom\r\n        const rending = []\r\n        if (fiber instanceof FiberOfNode) {\r\n            fiber.dom = childDom\r\n            if (!fiber.props.children) return childDom\r\n            rending.push(...fiber.props.children.flat(Infinity).map(child => {\r\n                if (typeof fiber.components != \"object\") {\r\n                    console.warn(\"fiber.component doit être une object\");\r\n                    fiber.components = {}\r\n                }\r\n                if (child instanceof FiberOfNode) {\r\n                    child.parent = fiber\r\n                    Object.assign(child.directives, fiber.directives)\r\n                    child.components = fiber.components\r\n                }\r\n                return render(child, childDom)\r\n            }))\r\n        }\r\n        Promise.all(rending)\r\n            .then((children) => {\r\n                initProps(childDom, fiber)\r\n                needCallback.after(() => DomController.$(childDom).dispatchReady(childDom, children))\r\n            })\r\n        return childDom\r\n    }\r\n    if (Array.isArray(dom)) {\r\n        if (fiber.parent instanceof FiberOfNode) {\r\n            return dom\r\n        }\r\n        const doc = new DocumentFragment\r\n        // insertEventDom(doc)\r\n        DomController.$(doc).$children = dom\r\n        // doc.$children = dom\r\n        doc.append(...dom)\r\n        return doc\r\n    }\r\n    return createChild(dom)\r\n}","\r\nimport { TemplateRef } from \"../templateRef.js\"\r\nimport { combineAndNoSaveRegExp, createRegExpSplit, combineAndSaveRegExp } from \"../RgExp.js\"\r\n\r\nexport const listTagEmpty = [\"area\", \"base\", \"br\", \"col\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]\r\nexport const listTagKnown = [\"a\", \"abbr\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"bdi\", \"bdo\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"dialog\", \"dir\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"font\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"marquee\", \"menu\", \"meta\", \"meter\", \"nav\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"picture\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"slot\", \"small\", \"source\", \"span\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"template\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"title\", \"tr\", \"track\", \"u\", \"ul\", \"var\", \"video\", \"wbr\"]\r\n\r\n//a mettre dans RgExp une fois stable\r\nexport const regExpHtmlTag = /<(?:\\/\\s*)?(?:[^\\!<>\\s\"'=\\/\\\\]+)\\s*(?:(?:\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*\"[^\"]*\"|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*'[^']*'|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*[^<>\\s\"'=\\/\\\\]+|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+?)*)\\s*(?:\\/)?\\s*>/g\r\nexport const regExpHtmlTagSave = /(<(?:\\/\\s*)?(?:[^\\!<>\\s\"'=\\/\\\\]+)\\s*(?:(?:\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*\"[^\"]*\"|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*'[^']*'|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*[^<>\\s\"'=\\/\\\\]+|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+?)*)\\s*(?:\\/)?\\s*>)/\r\nexport const regExpHtmlTagFullCapture = /<(?<isClosingTag>\\/\\s*)?(?<type>[^\\!<>\\s\"'=\\/\\\\]+)\\s*(?<attr>(?:\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*\"[^\"]*\"|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*'[^']*'|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*[^<>\\s\"'=\\/\\\\]+|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+?)*)\\s*(?<isAutoClose>\\/)?\\s*>/\r\nexport const regStringValidHtml = /[^<>\\s\"'`=\\/\\\\]+/\r\nexport const regStringValidHtmlSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)$/\r\nexport const regAttributeName = /(?<=\"|'|`|\\s*)[^<>\\s\"'`=\\/\\\\]+\\s*/\r\n\r\n// export const regAttrWithQuotes=/(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*\"[^\"]*\")/\r\nexport const regAttrWithQuotesSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*\"(?<attrValue>[^\"]*)\"$/\r\nexport const regExpAttrWithQuotes = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, /\"[^\"]*\"/)\r\n\r\n// export const regAttrWithApostrophe=/(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*'[^']*')/\r\nexport const regAttrWithApostropheSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*'(?<attrValue>[^']*)'$/\r\nexport const regExpAttrWithApostrophe = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, /'[^']*'/)\r\n\r\nexport const regAttrWithBacktic = /(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*`[^`]*`)/\r\nexport const regAttrWithBackticSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*`(?<attrValue>[^`]*)`$/\r\nexport const regExpAttrWithBacktic = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, /`[^`]*`/)\r\n\r\n// export const regAttrWithNoDelimiter=/(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*[^<>\\s\"'`=\\/\\\\]+\\s*)/\r\nexport const regAttrWithNoDelimiterSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*(?<attrValue>[^<>\\s\"'`=\\/\\\\]+)$/\r\nexport const regExpAttrWithNoDelimiter = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, regStringValidHtml)\r\n\r\n\r\nexport const regExpAttr = createRegExpSplit(\r\n    regExpAttrWithQuotes,\r\n    regExpAttrWithApostrophe,\r\n    regExpAttrWithBacktic,\r\n    regExpAttrWithNoDelimiter,\r\n    /\\s+/\r\n)\r\n\r\nexport function fasteSplitHtmlString(htmlString) { //1\r\n    return htmlString.split(regExpHtmlTagSave)\r\n}\r\n\r\n\r\nexport function isOpenTag(htmlTag) { // 1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    return result.groups.isClosingTag ? false : true\r\n}\r\nexport function isCloseTag(htmlTag) { //1\r\n    return !isOpenTag(htmlTag)\r\n}\r\nexport function getCloseTag(htmlTag) { //1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    return isCloseTag(htmlTag) ? result.groups.type : null\r\n}\r\nexport function getOpenTag(htmlTag) { //1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    return !result.groups.isClosingTag ? result.groups.type : null\r\n}\r\n\r\nexport function parseAttrString(attrString) { //1\r\n    let result\r\n    const counterName = {}\r\n    const value = (attr, name, value) => {\r\n        const directive = (val = value, names = name) => {\r\n            if (attr[names]) {\r\n                let i = Math.round(Math.random() * 100_000_000)\r\n                while ((names + `<${i}>`) in attr) { i++ }\r\n                attr[names + `<${i}>`] = val\r\n                return attr[names]\r\n            }\r\n            return val\r\n        }\r\n        if (name.startsWith(\"?\")||name.startsWith(\"on\")||[\"style\",\"class\"].includes(name)) {\r\n            return directive()\r\n        } else if (result = /^(?<name>\\$[^\\s</>:\\[\\]]+)(?:\\:(?<arg>[^\\s</>:\\[\\]]*)(\\[(?<modifiers>[^\\s</>\\[\\]]*)\\])?)?(?:\\<(?<index>\\d+)\\>)?$/.exec(name)) {\r\n            return directive()\r\n        }\r\n        return isNaN(value) ? value : Number(value)\r\n    }\r\n    return attrString.split(regExpAttr).reduce((attr, chaine) => {\r\n        if (/^\\s*$/.test(chaine)) return attr\r\n        let result\r\n        if (result = regAttrWithQuotesSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regAttrWithApostropheSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regAttrWithBackticSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regAttrWithNoDelimiterSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regStringValidHtmlSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = \"\"\r\n        }\r\n        return attr\r\n    }, {})\r\n}\r\nexport function parseHtmlTag(htmlTag) { //1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    const { type, attr, isAutoClose, isClosingTag } = result.groups\r\n    return {\r\n        get isTagEmpty() {\r\n            return listTagEmpty.includes(this.type)\r\n        },\r\n        get isTagKnown() {\r\n            return listTagKnown.includes(this.type)\r\n        },\r\n        type,\r\n        attr,\r\n        isAutoClose,\r\n        isClosingTag,\r\n        htmlTag,\r\n        props: parseAttrString(result.groups.attr),\r\n        initType(rxRefs) {\r\n            if (!(rxRefs instanceof TemplateRef)) throw new Error(\"rxRefs must be instance of RXRefs\")\r\n            const parseResult = TemplateRef.parse(this.type, rxRefs)\r\n            if (parseResult && parseResult.value.length == 2 && parseResult.value[0].at(-1) == \":\" && parseResult.value[1] instanceof Function) {\r\n                this.type = parseResult.value[0].slice(0, -1)\r\n                rxRefs.components[this.type] = parseResult.value[1]\r\n                // this.type = rxRefs.components[this.type]\r\n                return this.type\r\n            }\r\n            let type = TemplateRef.split(this.type, (({ index }) => rxRefs[index]))\r\n            type = type.length === 1 ? type[0] : type.join(\"\")\r\n            if (typeof type != \"string\" && typeof type != \"function\") {\r\n                type = `${typeof type}.is-not-component-valid`\r\n            }\r\n            // const componentList = Object.keys(rxRefs.components ?? {})\r\n            // if (!isKnownElement(type) && componentList.includes(type)) {\r\n            //     type = rxRefs.components[type]\r\n            // }\r\n            return this.type = type\r\n        }\r\n    }\r\n}\r\nexport function isKnownElement(type) {\r\n    return listTagKnown.includes(type?.toLowerCase?.())\r\n}\r\nexport function isTagEmpty(type) {\r\n    return listTagEmpty.includes(type?.toLowerCase?.())\r\n}","import { FiberOfElement, FiberOfFragment, FiberOfNode, FiberOfText } from \"../RxFiber/indexOfFiber.js\"\r\nimport { TemplateRef } from \"../templateRef.js\"\r\nimport { createRegExpSplit } from \"../RgExp.js\"\r\nimport { fasteSplitHtmlString, isOpenTag, isTagEmpty, parseHtmlTag } from \"./HtmlStringParser.js\"\r\n\r\nfunction rxReform(fiberList, htmlStringSplited, dataBinding) {\r\n    while (htmlStringSplited.length) {\r\n        const text = htmlStringSplited.shift()\r\n        if (/^\\s*$/.test(text)) continue\r\n        if (isOpenTag(text)) {\r\n            const fiber = parseHtmlTag(text)\r\n            fiber.children = []\r\n            fiber.initType(dataBinding)\r\n            if (!isTagEmpty(fiber.type) && !fiber.isAutoClose) {\r\n                getChildren(fiber, htmlStringSplited, dataBinding)\r\n            }\r\n            const el = new FiberOfElement(fiber.type, { ...fiber.props, children: fiber.children }, dataBinding)\r\n            fiberList.push(el)\r\n        } else {\r\n            const listT = text.split(createRegExpSplit(TemplateRef.regExp, /{{[^{}]*}}/))//(/((?:\\(_\\|-\\[RXRefs\\{index:\\d+,type:\\w+\\}\\]-\\|_\\))|(?:{{[^{}]*}}))/)\r\n            if (/^\\s*$/.test(listT[0])) listT.shift()\r\n            if (/^\\s*$/.test(listT.at(-1))) listT.pop()\r\n            fiberList.push(...listT.map(t => {\r\n                const isRef = (typeof t == \"string\") ? TemplateRef.parse(t, dataBinding) : t\r\n                t = isRef ? isRef.value[0] : t\r\n                if (typeof t != \"string\") return t\r\n                const isComment = (c) => /\\s*\\<\\!--.*--\\>\\s*/.test(c)\r\n                if (isComment(t)) {\r\n                    return t.split(/(\\s*\\<\\!--.*--\\>\\s*)/).map(t =>isComment(t) ? document.createComment(/^\\s*\\<\\!--(.*)--\\>\\s*$/.exec(t)[1]): t).filter(t => t)\r\n                }\r\n                return new FiberOfText(t, dataBinding)\r\n            }))\r\n        }\r\n    }\r\n    return fiberList\r\n}\r\nfunction getChildren(fiber, htmlStringSplited, dataBinding) {\r\n    if (fiber.type instanceof Function && !fiber.type.name) return\r\n    let count = 1\r\n    const index = htmlStringSplited.findIndex(e => {\r\n        const tag = parseHtmlTag(e)\r\n        const rcRef = TemplateRef.parse(tag ? tag.type : e, dataBinding)\r\n        if (tag && ((rcRef && rcRef.value[0] === fiber.type) || (tag.type === fiber.type))) {\r\n            count = tag.isClosingTag ? count - 1 : count + 1\r\n            if (tag.isClosingTag && count <= 0) return true\r\n        }\r\n        return false\r\n    })\r\n    if (index === -1) {\r\n        fiber.children = htmlStringSplited.splice(0, htmlStringSplited.length).filter(e => !/^\\s*$/.test(e))\r\n    } else {\r\n        fiber.children = htmlStringSplited.splice(0, index + 1).filter(e => !/^\\s*$/.test(e))\r\n        fiber.children.pop()\r\n    }\r\n    if (fiber.type == \"script\") {\r\n        let innerText = fiber.children.join(\"\")\r\n        const res = TemplateRef.parse(innerText, dataBinding)\r\n        if (res) {\r\n            innerText = res.valueString\r\n        }\r\n        fiber.children = [new Text(innerText)]\r\n    } else {\r\n        fiber.children = rxReform([], fiber.children, dataBinding)\r\n    }\r\n}\r\nfunction parse(strings, ...rxRefs) {\r\n    return [[...rxRefs.reduce((list, _str, index) => {\r\n        list.push(strings[index], `(_|-[RXRefs{index:${index},type:${typeof rxRefs[index]}}]-|_)`)\r\n        return list\r\n    }, []), strings[rxRefs.length]].join(\"\"), rxRefs]\r\n}\r\n\r\nfunction parseHtmlString(htmlString, rxRefs) {\r\n    if (!(rxRefs instanceof TemplateRef)) throw new Error(\"rxRefs must be instance of RXRefs\")\r\n    const htmlArray = fasteSplitHtmlString(htmlString)\r\n    const html = rxReform([], htmlArray, rxRefs)\r\n    if (html.length == 1) {\r\n        const el = html[0]\r\n        return el instanceof FiberOfNode ? el : new FiberOfText(el, rxRefs)\r\n    }\r\n    const frag = new FiberOfFragment(html, rxRefs)\r\n    return frag\r\n}\r\n\r\nexport function template(strings, ...refs) {\r\n    let config\r\n    if (typeof refs[0] == \"object\" && refs[0][\"<isStore>\"] === true) {\r\n        config = refs[0]\r\n        refs[0] = \"\"\r\n    }\r\n    const [htmlstring] = parse(strings, ...refs)\r\n    const rxRefs = new TemplateRef(...refs)\r\n    const rcNode = parseHtmlString(htmlstring, rxRefs)\r\n    if (config) {\r\n        if (config.components && typeof config.components == \"object\") rcNode.components = config.components\r\n        if (config.directives && typeof config.directives == \"object\") rcNode.directives = config.directives\r\n    }\r\n    return rcNode\r\n}","export { createDom, render } from \"./Rimax/core/core.js\";\r\nexport {component} from \"./Rimax/core/component.js\";\r\nexport { useState, RXState,useRef,useEffect,useLayoutEffect,useProps,useEvent,useMemo } from \"./Rimax/hooks/indexHooks.js\";\r\nexport {define} from \"./Rimax/core/customeElement.js\";\r\nexport { TemplateRef as LinksOfDataInTemplateString } from \"./Rimax/core/templateRef.js\";\r\nexport {FiberOfElement,FiberOfFragment,FiberOfNode,FiberOfText} from \"./Rimax/core/RxFiber/indexOfFiber.js\";\r\nexport { template } from \"./Rimax/core/RcHtmlString/RcHtmlString.js\";\r\n\r\nimport { createDom, } from \"./Rimax/core/core.js\";\r\nimport { useState,RXState} from \"./Rimax/hooks/indexHooks.js\";\r\nimport { template } from \"./Rimax/core/RcHtmlString/RcHtmlString.js\";\r\n\r\n\r\nexport function html(...args) {\r\n    return createDom(template(...args))\r\n}\r\nconst needCallback = (callback, args, $this) => callback.apply($this, args)\r\nneedCallback.after = (callback, args, $this) => Promise.resolve().then(() => callback.apply($this, args))\r\nneedCallback.idle = (callback, args, $this) => requestIdleCallback(() => callback.apply($this, args))\r\n//###################\r\nconst Fragment = \"FRAGMENT\"\r\nconst TextElement = \"TEXT\"\r\nexport function createFiber(type, props, ...children) {\r\n    const refs = new LinksOfDataInTemplateString()\r\n    props = props ?? { children: [] }\r\n    children = children.map(child => child instanceof RcHtmlNode ? child : new RcHtmlText(child, refs))\r\n    if (type == Fragment) {\r\n        return new RcHtmlFragment(children, refs)\r\n    }\r\n    if (type == TextElement) {\r\n        return new RcHtmlText(children, refs)\r\n    }\r\n    return new RcHtmlElement(type, { ...props, children }, refs)\r\n}\r\ncreateFiber.Fragment = Fragment\r\ncreateFiber.Text = TextElement\r\n//###################\r\n\r\n\r\nfunction map(state, callback) {\r\n    const list=state instanceof RXState?[...(state.value)]:state\r\n    var [state,setState]=useState(state,(v)=>{\r\n        list.splice(0,list.length,...v)\r\n        return list\r\n    })\r\n    // isFunction(callback)\r\n    const createState = (v, i) => [useState(v)[0], useState(i)[0]]\r\n    const rendMap = (v) => callback(...v, state,(value)=>{\r\n        const [item,index]=v\r\n        return setState.edit(index,value)\r\n    })\r\n    const listState = state.value.map(createState)\r\n    let listElement = needCallback.after(()=>listState.map(rendMap))\r\n    const [items, setItems] = useState(listElement)\r\n    items.onChange(list=>needCallback.after(()=>{\r\n        if(list instanceof Promise) return;\r\n        if(!list.every(item=>item instanceof Node)){\r\n            throw new Error(\"html.map doit retourner des list d'element Node\")\r\n        }\r\n    }),true)\r\n    const update = () => listState.map(([v, i], index) => needCallback.after(()=>{\r\n        if (!i.isDestroyed) i.set(index);\r\n        if (!v.isDestroyed) v.set(state.value[index]);\r\n    }))\r\n    state.onChange((val) => {\r\n        if (listState.length > val.length) {\r\n            const indexStart = val.length\r\n            const end = listState.length\r\n            listState.splice(indexStart, end).map(s => s.map(i => i.destroy(true)))\r\n            setItems.splice(indexStart, end)\r\n        } else if (listState.length < val.length) {\r\n            const indexStart = listState.length\r\n            listState.push(...val.slice(indexStart).map(createState))\r\n            listState.map(([, index], i) => index.set(i))\r\n            setItems.push(...listState.slice(indexStart).map(rendMap))\r\n        }\r\n        update()\r\n        // console.log(items.value);\r\n    })\r\n    return items\r\n}\r\nhtml.map=map\r\n","import { useProps } from \"../hooks/indexHooks.js\"\r\n\r\nexport function component(callback, option = { defaultProps: {}}) {\r\n    if(typeof option!=\"object\") throw new Error(\"option doit être une de type object\")\r\n    const defaultProps=option.defaultProps??{}\r\n    if(typeof defaultProps!=\"object\") throw new Error(\"option.defaultProps doit être une de type object\")\r\n    const fn=(props) => callback(useProps({...defaultProps,...props}))\r\n    fn.defaultProps=defaultProps\r\n    return fn\r\n}\r\n","import { useEvent, useProps, useState } from \"../hooks/indexHooks.js\"\r\nimport { createDom } from \"./core.js\"\r\nimport { DomController } from \"./domController.js\"\r\n\r\n\r\nexport function define(tagName, renderCallback, option = { defaultProps: {}, shadowRoot: null }) {\r\n    const _defaultProps = { ...(option.defaultProps ?? {}) }\r\n    const EVENTS = {}\r\n    const CLASSElement = class extends HTMLElement { \r\n        #id = Math.random()\r\n        static get observedAttributes() { return Object.keys(_defaultProps) }\r\n        attributeChangedCallback(name, oldV, newV) {\r\n            if (useState.isState(this.props[name]) && this.props[name].toString() != newV && typeof this.props[name].value != \"object\") {\r\n                this.props[name].set(newV)\r\n            }\r\n        }\r\n        constructor(props) {\r\n            props = typeof props == \"object\" ? props : { children: [] }\r\n            super()\r\n            // insertEventDom(this)\r\n            DomController.$(this)\r\n            // this.innerHTML='<slot/>'\r\n            props = useProps({ ..._defaultProps, ...props })\r\n            props.children.push(...[...this.childNodes].map(c => {\r\n                c.remove()\r\n                insertEventDom(c)\r\n                DomController.$(c)\r\n                return c\r\n            }))\r\n            this.props = props\r\n            Object.entries(props).map(([attrName, attrValue]) => {\r\n                if (attrName == \"children\" || attrName.startsWith('$')) return;\r\n                this.onCleanup = attrValue.onChange((val) => {\r\n                    if (typeof val != 'object') {\r\n                        Promise.resolve().then(() => this.setAttribute(attrName, attrValue.toString()))\r\n                        return () => this.removeAttribute(attrName)\r\n                    }\r\n                    this.removeAttribute(attrName)\r\n                }, true)\r\n            })\r\n            const root = option.shadowRoot && this.attachShadow({\r\n                mode: \"closed\" === option.shadowRoot?.mode ? \"closed\" : \"open\",\r\n                delegatesFocus: !!option.shadowRoot?.delegatesFocus,\r\n                slotAssignment: \"manual\"// === option.shadowRoot?.slotAssignment ? \"manual\" : \"named\"\r\n            })\r\n            EVENTS[this.#id] = {\r\n                connectedCallback: useEvent(),\r\n                disconnectedCallback: useEvent(),\r\n                adoptedCallback: useEvent(),\r\n                onCleanup: [this.onCleanup],\r\n                mounted: useEvent({\r\n                    onSubscribe: (fn) => {\r\n                        return (...arg) => {\r\n                            const rv = fn(arg)\r\n                            if (rv instanceof Function) {\r\n                                this.onCleanup(rv)\r\n                            }\r\n                        }\r\n                    }\r\n                }),\r\n            }\r\n            const $component = Object.freeze({\r\n                root, el: this,\r\n                ...Object.entries(EVENTS[this.#id]).reduce((ob, [k, v]) => {\r\n                    ob[k] = v[0]\r\n                    return ob\r\n                }, {})\r\n            })\r\n            const children = createDom(renderCallback(props, $component))\r\n            const container = root || this\r\n            container.append(children)\r\n            const re = this.dispatchReady(this, children)\r\n            EVENTS[this.#id].mounted[1](this, children)\r\n        }\r\n        connectedCallback(...arg) { EVENTS[this.#id].connectedCallback[1](...arg) }\r\n        disconnectedCallback(...arg) { EVENTS[this.#id].disconnectedCallback[1](...arg) }\r\n        adoptedCallback(...arg) { EVENTS[this.#id].adoptedCallback[1](...arg) }\r\n    }\r\n\r\n    customElements.define(tagName, CLASSElement, { extends: option.extends })\r\n    return (props) => new CLASSElement({children:[],...props})\r\n}","import { RXState } from \"./useState.js\"\r\n\r\nexport function useEffect(callback, states = []) {\r\n    if (!Array.isArray(states)) throw new Error(\"states doit être une Array\")\r\n    const listRmv = []\r\n    let remove\r\n    const array = [...states]\r\n    const getValue = s => s instanceof RXState ? s.value : s\r\n    const update=i=> Promise.resolve().then(() => remove = callback([...array.map(getValue)],i))\r\n    array.forEach((st, i) => {\r\n        if (st instanceof RXState) {\r\n            listRmv.push(st.onChange(() => {update(i)}))\r\n        }\r\n    })\r\n    requestIdleCallback(() => remove = callback([...array.map(getValue)],-1))\r\n    return () => {\r\n        listRmv.splice(0,listRmv.length).map(fn => fn?.())\r\n        if (remove instanceof Function) remove(-1, [...array].map(getValue))\r\n    }\r\n}","import { RXState } from \"./useState.js\"\r\n\r\nexport function useLayoutEffect(callback, states = []) {\r\n    if (!Array.isArray(states)) throw new Error(\"states doit être une Array\")\r\n    const listRmv = []\r\n    let remove\r\n    const array = [...states]\r\n    const getValue = s => s instanceof RXState ? s.value : s\r\n    const update=i=> remove = callback([...array.map(getValue)],i)\r\n    array.forEach((st, i) => {\r\n        if (st instanceof RXState) {\r\n            listRmv.push(st.onChange(() => {update(i)}))\r\n        }\r\n    })\r\n    update(-1)\r\n    return () => {\r\n        listRmv.splice(0,listRmv.length).map(fn => fn?.())\r\n        if (remove instanceof Function) remove(-1, [...array].map(getValue))\r\n    }\r\n}"],"names":["guardFn","v","stateSymbol","Symbol","isState","ref","bind","RXState","isArray","Array","this","value","toString","String","valueOf","static","createState","guard","currentValueOfState","oldValueOfState","isDestroyed","subscriber","ID","Math","random","GUARDS","DESTROY_EVENTS","Set","UPDATE_EVENTS","ACTIONS","Object","freeze","guards","id","len","onChange","size","onCleanup","addGuard","Function","callback","a","lastIndex","push","isRemoved","splice","i","find","fn","clear","withDom","forEach","destroy","callbackOrState","directApply","state","args","set","slice","Error","on","dispatch","undefined","methode","onDispatch","arg","isCalled","delete","add","oldValue","constructor","super","defineProperty","get","enumerable","assign","actions","toValidate","option","oldValues","reduceRight","val","Promise","createStateComputed","dependencies","optDependencies","update","optionState","setState","useState","listrmv","map","st","_1","_2","entries","stateType","type","fnGuard","then","_oldValue","dispatchUpdate","stateInstace","isFunction","getIndex","index","findIndex","isNaN","rendMap","listState","listElement","items","setItems","length","indexStart","end","s","action","returnValue","remove","start","deleteCount","edit","pop","shift","unshift","reverse","fill","filter","predicate","sort","compareFn","b","every","item","arguments","callbackfn","thisArg","insertArrayMethode","k","payload","array","number","string","function","boolean","symbol","object","refSymbol","useRef","changeRef","OBJECT","configurable","useProps","props","reduce","prop","key","startsWith","isRef","handlerEvent","beforeDispatch","afterDispatch","data","onSubscribe","clearAfterEachDispatch","useEvent","handler","EVENTS","rest","useMemo","states","listRmv","getValue","DATABASE","Map","DomController","dom","Node","destroyList","onReady","dispatchReady","onConnected","dispatchConnected","isReady","$children","childNodes","textRef","Text","root","isValid","onCleanUp","onDestroy","defineProperties","getFiber","model","isClean","DocumentFragment","el","$","writable","getTextRoot","resolve","parentNode","after","isConnected","parentElement","onconnected","console","log","createHandler","children","flat","Infinity","codeLogError","fr","en","CODES","combineAndNoSaveRegExp","regs","RegExp","regFinal","reg","source","getRegSource","combineRegExp","createRegExpSaved","createRegExp","createRegExpSplit","code","lang","includes","name","rxError","TemplateRef","regExp","regExpSaved","regExpSavedG","split","chaine","includeResults","l","r","parse","replaceAll","input","refs","result","exec","valueString","join","groups","components","customeElementRegistry","directiveOption","attrName","attrValue","directiveName","modifiers","FiberOfNode","directives","$onInit","warn","$shadowRoot","elementsCanAttachShadowRoot","localName","oldChildren","attachShadow","mode","innerHTML","append","$attrState","setAttribute","cleanup","$if","listCondition","hasValidNow","values","isTrue","makeVisible","isVisible","$ref","current","$show","isShow","hidden","$bind","fnRmvs","getAttribute","keys","eventName","addEventListener","removeEventListener","$directives","initProps","getrefs","generateKey","at","indexA","indexOf","round","gk","attrNameComputed","valueArray","test","valueFinal","hasValueFinal","stateValue","hasCallback","hasState","createMemo","callbackName","attr","lnc","ismustState","parent","parentFiber","domValue","FiberOfElement","child","FiberOfFragment","FiberOfText","text","nodeValue","needCallback","$this","apply","needCallback$1","idle","requestIdleCallback","updateArray","valueOfState","$firstElement","listDom","indexItem","createDom","e","_e","before","bindData","textDom","textFiber","isRended","putAfter","elRef","elTarget","isforced","rendLater","p","JSON","stringify","error","updateDataBinding","listOfTagPriority","render","element","container","document","body","querySelector","returnDom","txtRef","shadowRoot","createTextRef","appendChild","toLowerCase","isRendPriority","async","init","fiber","EventTarget","sendListOfDom","list","component","defaultProps","createElement","doc","childDom","rending","all","HTMLElement","globalData","counterName","setOneAttribute","listOnCleanup","domEl","attrN","HTMLSelectElement","multiple","setAttr","rendAttribute","onRemove","redOneStyle","oldVal","toClean","resultReg","rcState","res","applyCallback","removeEv","rmv","Number","modif","selectedIndex","opt","target","checked","styleDefault","style","cssText","rendStyle","rendClass","addValue","_value","classList","removeValue","rmvAttr","insertAttr","inertAttr","when","rmAt","clean","removeAttribute","createChild","listTagEmpty","listTagKnown","regExpHtmlTagSave","regExpHtmlTagFullCapture","regStringValidHtmlSaved","regAttributeName","regAttrWithQuotesSaved","regExpAttrWithQuotes","regAttrWithApostropheSaved","regExpAttrWithApostrophe","regAttrWithBackticSaved","regExpAttrWithBacktic","regAttrWithNoDelimiterSaved","regExpAttr","isOpenTag","htmlTag","isClosingTag","parseAttrString","attrString","directive","names","parseHtmlTag","isAutoClose","isTagEmpty","isTagKnown","initType","rxRefs","parseResult","rxReform","fiberList","htmlStringSplited","dataBinding","getChildren","listT","t","isComment","c","createComment","count","tag","rcRef","innerText","parseHtmlString","htmlString","htmlArray","fasteSplitHtmlString","html","template","strings","config","htmlstring","_str","rcNode","Fragment","TextElement","createFiber","LinksOfDataInTemplateString","RcHtmlNode","RcHtmlText","RcHtmlFragment","RcHtmlElement","tagName","renderCallback","_defaultProps","CLASSElement","observedAttributes","attributeChangedCallback","oldV","newV","insertEventDom","delegatesFocus","slotAssignment","connectedCallback","disconnectedCallback","adoptedCallback","mounted","rv","$component","ob","customElements","define","extends"],"mappings":"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"}