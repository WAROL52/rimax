{"version":3,"file":"rimax.es.min.js","sources":["../Rimax/hooks/useState.js","../Rimax/hooks/useRef.js","../Rimax/hooks/useEffect.js","../Rimax/hooks/useLayoutEffect.js","../Rimax/hooks/useProps.js","../Rimax/hooks/useEvent.js","../Rimax/hooks/useMemo.js","../Rimax/core/domController.js","../Rimax/core/rxError.js","../Rimax/core/RgExp.js","../Rimax/core/templateRef.js","../Rimax/core/RxFiber/FiberOfNode.js","../Rimax/core/RxFiber/FiberOfElement.js","../Rimax/core/RxFiber/FiberOfFragment.js","../Rimax/core/RxFiber/FiberOfText.js","../Rimax/core/core.js","../Rimax/core/component.js","../Rimax/core/customeElement.js","../Rimax/core/RcHtmlString/HtmlStringParser.js","../Rimax/core/RcHtmlString/RcHtmlString.js","../index.js"],"sourcesContent":["const guardFn = v => v\r\nconst stateSymbol = Symbol(\"$$State\")\r\nconst isState = ((ref) => (typeof ref == \"object\") && stateSymbol === ref[\".rxType\"]).bind()\r\nexport class RXState {\r\n    get isArray() { return Array.isArray(this.value) }\r\n    toString() { return String(this.value) }\r\n    valueOf() { return this.value }\r\n    get [\".rxType\"]() { return stateSymbol }\r\n    static isState = isState\r\n}\r\nfunction createState(value, guard) {\r\n    let currentValueOfState\r\n    let oldValueOfState\r\n    let isDestroyed = false\r\n    let subscriber=0\r\n    const ID = Math.random()\r\n    const GUARDS = []\r\n    const DESTROY_EVENTS = new Set()\r\n    const UPDATE_EVENTS = new Set()\r\n    const ACTIONS={}\r\n    const dispatchUpdate = (option) => { UPDATE_EVENTS.forEach(fn =>fn(currentValueOfState, oldValueOfState, option)) }\r\n    \r\n    return Object.freeze(new (class rxState extends RXState {\r\n        get guards() { return [...GUARDS] }\r\n        get isDestroyed() { return isDestroyed }\r\n        get id() { return ID }\r\n        get len() { return {onChange:UPDATE_EVENTS.size,onCleanup:DESTROY_EVENTS.size,subscriber} }\r\n        addGuard(guard) {\r\n            if (!(guard instanceof Function)) return () => undefined\r\n            const callback = (...a) => guard(...a)\r\n            const lastIndex = GUARDS.push(callback) - 1\r\n            let isRemoved = false\r\n            return () => {\r\n                if (isRemoved) return true\r\n                if (GUARDS[lastIndex] === callback) {\r\n                    GUARDS.splice(lastIndex, 1)\r\n                    isRemoved = true\r\n                    return true\r\n                }\r\n                const i = GUARDS.find(fn => fn === callback)\r\n                if (i > -1) {\r\n                    GUARDS.splice(i, 1)\r\n                    return true\r\n                }\r\n                return false\r\n            }\r\n        }\r\n\r\n        clear(withDom = false) {\r\n            DESTROY_EVENTS.forEach(fn => fn(withDom))\r\n            DESTROY_EVENTS.clear()\r\n            UPDATE_EVENTS.clear()\r\n        }\r\n        destroy(withDom = true) {\r\n            if (isDestroyed) return;\r\n            this.clear(withDom)\r\n            isDestroyed = true\r\n        }\r\n\r\n        onChange = ((callbackOrState, directApply = false) => {\r\n            if (callbackOrState instanceof RXState) {\r\n                const callback = directApply instanceof Function ? directApply : v => v\r\n                const state=callbackOrState\r\n                subscriber++\r\n                let isRemoved\r\n                return this.onChange((...args) =>{\r\n                    state.set(() => callback(...args), ...args.slice(1))\r\n                    return ()=>{\r\n                        if(isRemoved) return\r\n                        isRemoved=true\r\n                        subscriber--\r\n                    }\r\n                }, true)\r\n            }\r\n            if (!(callbackOrState instanceof Function)) throw new Error(\"callback doit être une fonction\")\r\n            const on = {\r\n                dispatch: callbackOrState, destroy: directApply ? callbackOrState(this.value, undefined, { methode: \"set\", value: this.value }) : undefined\r\n            }\r\n            const onDispatch = (...arg) => on.destroy = on.dispatch(...arg)\r\n            let isCalled = false\r\n            const destroy = (...arg) => {\r\n                if (isCalled) return\r\n                isCalled = true\r\n                if (on.destroy instanceof Function) on.destroy(...arg);\r\n                DESTROY_EVENTS.delete(destroy)\r\n                UPDATE_EVENTS.delete(onDispatch)\r\n            }\r\n            UPDATE_EVENTS.add(onDispatch)\r\n            DESTROY_EVENTS.add(destroy)\r\n            return destroy\r\n        }).bind()\r\n        onCleanup = ((callback) => {\r\n            if (!(callback instanceof Function)) throw new Error(\"callback doit être une fonction\")\r\n            const fn=(...args)=>callback(...args)\r\n            DESTROY_EVENTS.add(fn)\r\n            return () => DESTROY_EVENTS.delete(callback)\r\n        }).bind()\r\n\r\n\r\n        get oldValue() { return oldValueOfState }\r\n\r\n        constructor(value, guard = v => v) {\r\n            super()\r\n            Object.defineProperty(this, \"value\", {\r\n                get: (() => currentValueOfState).bind(),\r\n                set: ((value) => this.set(value)).bind(),\r\n                enumerable: true,\r\n            })\r\n            if(guard&& typeof guard ==\"object\"){\r\n                Object.assign(ACTIONS,guard.actions??{})\r\n                guard=guard.guard??(v => v)\r\n            }\r\n            if (!(guard instanceof Function)) throw new Error(\"guard doit être une fonction\")\r\n            currentValueOfState = value\r\n            GUARDS.push(guard)\r\n            const toValidate = (value, oldValue = oldValueOfState, option = {}) => {\r\n                const oldValues = []\r\n                return GUARDS.reduceRight((val, guardFn) => {\r\n                    oldValues.push(val)\r\n                    return guardFn(val, oldValue, option, [...oldValues])\r\n                }, value)\r\n            }\r\n            if (!(value instanceof Promise)) {\r\n                currentValueOfState = toValidate(value, undefined, {})\r\n            }\r\n            const createStateComputed = (callback = () => currentValueOfState, dependencies = [], guard = v => v) => {\r\n                if (!(callback instanceof Function)) throw new Error(\"callback doit être une function\")\r\n                if (isDestroyed) throw new Error(\"cette Etat ne peut plus etre utiliser car elle est deja detruit\")\r\n                const optDependencies=(dependencies&&!Array.isArray(dependencies)&&typeof dependencies==\"object\")?dependencies:{}\r\n                dependencies=Array.isArray(dependencies)?dependencies:optDependencies.dependencies??[]\r\n                if (!Array.isArray(dependencies)) throw new Error(\"dependencies doit être une Array\")\r\n                const update = (option = {}) => callback(currentValueOfState, oldValueOfState, option)\r\n                const optionState={guard,...optDependencies}\r\n                const [state, setState] = useState(update(), optionState)\r\n                if(optionState.guard!==guard)state.addGuard(guard);\r\n                const states = [this, ...dependencies]\r\n                const listrmv = states.map(st => {\r\n                    if (st instanceof RXState) {\r\n                        return st.onChange((_1, _2, option) => {\r\n                            setState(update(option), option)\r\n                            return () => !state.isDestroyed && state.destroy(true)\r\n                        })\r\n                    }\r\n                })\r\n                state.onCleanup(() => listrmv.map(fn => fn instanceof Function && fn()))\r\n                return state\r\n            }\r\n            this.get = ((callback = () => this.value, dependencies = []) => createStateComputed(callback, dependencies)).bind()\r\n            Object.entries(stateType).map(([type, fnGuard]) => this.get[type] = (callback = () => this.value, dependencies = []) => createStateComputed(callback, dependencies, fnGuard))\r\n            this.set = ((value, option = { methode: \"set\", value: value }) => {\r\n                if (isDestroyed) throw new Error(\"cette Etat ne peut plus etre utiliser car elle est deja detruit\")\r\n                if (typeof option != \"object\") throw new Error(\"option doit être un object\")\r\n                if (value instanceof Promise) {\r\n                    return value.then(v => this.set(v))\r\n                }\r\n                if (value instanceof RXState) value = value.value;\r\n                if (value instanceof Function) value = value(currentValueOfState, oldValueOfState)\r\n                const _oldValue = currentValueOfState\r\n                if (_oldValue !== value) {\r\n                    value = toValidate(value, _oldValue, option);\r\n                    oldValueOfState = _oldValue\r\n                    currentValueOfState = value\r\n                    dispatchUpdate(option)\r\n                }\r\n                return currentValueOfState\r\n            }).bind()\r\n            insertArrayMethode(this, { createStateComputed })\r\n            Object.entries(ACTIONS).map(([k,v])=>this.set[k]=payload=>this.set(v instanceof Function ?v(currentValueOfState,payload):v))\r\n            if (value instanceof Promise) {\r\n                value.then(v => this.set(v))\r\n            }\r\n        }\r\n\r\n    })(value, guard))\r\n}\r\nconst stateType = {\r\n    array(v) {\r\n        if (!Array.isArray(v)) throw new Error(\"cette state doit être de type Array\")\r\n        return v\r\n    },\r\n    number(v) {\r\n        if (typeof v != \"number\") throw new Error(\"cette state doit être de type Number\")\r\n        return v\r\n    },\r\n    string(v) {\r\n        if (typeof v != \"string\") throw new Error(\"cette state doit être de type string\")\r\n        return v\r\n    },\r\n    function(v) {\r\n        if (typeof v != \"function\") throw new Error(\"cette state doit être de type function\")\r\n        return v\r\n    },\r\n    boolean(v) {\r\n        if (typeof v != \"boolean\") throw new Error(\"cette state doit être de type boolean\")\r\n        return v\r\n    },\r\n    symbol(v) {\r\n        if (typeof v != \"symbol\") throw new Error(\"cette state doit être de type symbol\")\r\n        return v\r\n    },\r\n    object(v) {\r\n        if (typeof v != \"object\") throw new Error(\"cette state doit être de type object\")\r\n        return v\r\n    },\r\n}\r\nfunction insertArrayMethode(stateInstace, { createStateComputed }) {\r\n    const state = stateInstace\r\n    const isArray = () => {\r\n        if (!state.isArray) throw new Error(\"pour pouvoir utiliser cette methode le type de state doit être une Array\")\r\n    }\r\n    const isFunction = (callback) => {\r\n        if (!(callback instanceof Function)) throw new Error(\"callback doit doit être une function\")\r\n    }\r\n    const getIndex = (index) => {\r\n        if (index instanceof RXState) {\r\n            index = index.value\r\n        }\r\n        if (index instanceof Function) {\r\n            index = state.value.findIndex(index)\r\n        }\r\n        if (isNaN(index)) throw new Error(\"index doit être une nombre ou une fonction qui retourne un nombre\")\r\n        return index\r\n    }\r\n    state.get.map = (callback) => {\r\n        isFunction(callback)\r\n        const createState = (v, i) => [useState(v)[0], useState(i)[0]]\r\n        const rendMap = (v) => callback(...v, state)\r\n        const listState = state.value.map(createState)\r\n        let listElement = listState.map(rendMap)\r\n        const [items, setItems] = useState(listElement)\r\n        const update = () => listState.map(([v, i], index) => {\r\n            if (!i.isDestroyed) i.set(index);\r\n            if (!v.isDestroyed) v.set(state.value[index]);\r\n        })\r\n        state.onChange((val) => {\r\n            if (listState.length > val.length) {\r\n                const indexStart = val.length\r\n                const end = listState.length\r\n                listState.splice(indexStart, end).map(s => s.map(i => i.destroy(true)))\r\n                setItems.splice(indexStart, end)\r\n            } else if (listState.length < val.length) {\r\n                const indexStart = listState.length\r\n                listState.push(...val.slice(indexStart).map(createState))\r\n                listState.map(([, index], i) => index.set(i))\r\n                setItems.push(...listState.slice(indexStart).map(rendMap))\r\n            }\r\n            update()\r\n            // console.log(items.value);\r\n        })\r\n        return items\r\n    }\r\n    state.get.callback = (callback) => {\r\n        if (!(callback instanceof Function)) throw new Error(\"callback doit être une function\")\r\n        return state.get(() => callback)\r\n    }\r\n    const action = (args, action) => {\r\n        isArray()\r\n        if (state.value[action] instanceof Function) {\r\n            const returnValue = state.value[action](...args)\r\n            return state.set([...state.value], { methode: \"set\", action, args, returnValue })\r\n        }\r\n    }\r\n    // TODO: state.set.remove\r\n    // TODO: state.set.removeItem\r\n    // TODO: state.set.editItem\r\n    state.set.splice = (...args) => action([...args], \"splice\")\r\n    state.set.remove = (start, deleteCount = 1) => {\r\n        const returnValue = state.value.splice(start, deleteCount)\r\n        return state.set([...state.value], { methode: \"set\", action: \"remove\", args: [start, deleteCount], returnValue })\r\n    }\r\n    state.set.edit = (index, value) => {\r\n        isArray()\r\n        index = getIndex(index)\r\n        if (index > -1) {\r\n            if (value instanceof Function) {\r\n                value = value(state.value[index], index, state.value)\r\n            }\r\n            const returnValue = state.value.splice(index, 1, value)\r\n            return state.set([...state.value], { methode: \"set\", action: \"edit\", args: [index, value], returnValue })\r\n        }\r\n    }\r\n    state.set.push = (...items) => action([...items], \"push\")\r\n    state.set.pop = () => action([], \"pop\")\r\n    state.set.shift = () => action([], \"shift\")\r\n    state.set.unshift = (...items) => action([...items], \"shift\")\r\n    state.set.reverse = () => action([], \"reverse\")\r\n    state.set.fill = (...items) => action([...items], \"fill\")\r\n    state.set.filter = (predicate, ...args) => {\r\n        isArray()\r\n        isFunction(predicate)\r\n        const returnValue = state.value.filter(predicate, ...args)\r\n        return state.set(returnValue, { methode: \"set\", action: \"filter\", args: [predicate, ...args], returnValue })\r\n    }\r\n    state.set.slice = (...args) => {\r\n        isArray()\r\n        const returnValue = state.value.slice(...args)\r\n        return state.set(returnValue, { methode: \"set\", action: \"slice\", args, returnValue })\r\n    }\r\n    state.set.sort = (compareFn = (a, b) => b - a) => {\r\n        isArray()\r\n        isFunction(compareFn)\r\n        const oldValue = state.value.slice()\r\n        const returnValue = state.value.sort(compareFn)\r\n        if (returnValue.every((item, index) => item === oldValue[index])) return state.value\r\n        return state.set(returnValue, { methode: \"set\", action: \"sort\", args:arguments, returnValue })\r\n    }\r\n    state.set.map = (callbackfn, thisArg = state.value) => {\r\n        isArray()\r\n        isFunction(callbackfn)\r\n        const returnValue = state.value.map(callbackfn, ...args)\r\n        return state.set(returnValue, { methode: \"set\", action: \"map\", args, returnValue })\r\n    }\r\n}\r\n\r\nexport default function useState(value, guard = guardFn) {\r\n    if (value instanceof RXState) {\r\n        value = value\r\n        if (guard instanceof Function && guard !== guardFn) value.addGuard(guard);\r\n    } else if (Array.isArray(value) && value[0] instanceof RXState && value[1] === value[0].set) {\r\n        value = value[0]\r\n        if (guard instanceof Function && guard !== guardFn) value.addGuard(guard);\r\n    } else {\r\n        value = createState(value, guard)\r\n    }\r\n    return [value, value.set]\r\n}\r\n\r\n\r\nObject.entries(stateType).map(([type, guard]) => useState[type] = (value) => useState(value, guard))\r\nuseState.isState = isState","import useState from \"./useState.js\"\r\nconst refSymbol=Symbol(\"$$ref\")\r\nexport default function useRef(value) {\r\n    const [ref, changeRef] = useState(value)\r\n    const OBJECT=Object\r\n    return OBJECT.freeze(new (class Object {\r\n        constructor(){\r\n            OBJECT.defineProperty(this,\"current\",{\r\n                get:(()=>ref.value).bind(),\r\n                set:((val)=>changeRef(val)).bind(),\r\n                enumerable:true,\r\n                configurable:false\r\n            })\r\n            OBJECT.defineProperty(this,\"onChange\",{\r\n                value:((fn)=>ref.onChange(fn)).bind(),\r\n                enumerable:true,\r\n            })\r\n        }\r\n        onCleanup(fn){return ref.onCleanup(fn)}\r\n        destroy(fn){return ref.destroy(true)}\r\n        set(fn){return changeRef(fn)}\r\n        get [\".rxType\"](){return refSymbol}\r\n    }))\r\n}\r\nuseRef.isRef=((ref)=>(typeof ref==\"object\")&&refSymbol===ref[\".rxType\"]).bind()\r\n","import { RXState } from \"./useState.js\"\r\n\r\nexport function useEffect(callback, states = []) {\r\n    if (!Array.isArray(states)) throw new Error(\"states doit être une Array\")\r\n    const listRmv = []\r\n    let remove\r\n    const array = [...states]\r\n    const getValue = s => s instanceof RXState ? s.value : s\r\n    const update=i=> Promise.resolve().then(() => remove = callback([...array.map(getValue)],i))\r\n    array.forEach((st, i) => {\r\n        if (st instanceof RXState) {\r\n            listRmv.push(st.onChange(() => {update(i)}))\r\n        }\r\n    })\r\n    requestIdleCallback(() => remove = callback([...array.map(getValue)],-1))\r\n    return () => {\r\n        listRmv.splice(0,listRmv.length).map(fn => fn?.())\r\n        if (remove instanceof Function) remove(-1, [...array].map(getValue))\r\n    }\r\n}","import { RXState } from \"./useState.js\"\r\n\r\nexport function useLayoutEffect(callback, states = []) {\r\n    if (!Array.isArray(states)) throw new Error(\"states doit être une Array\")\r\n    const listRmv = []\r\n    let remove\r\n    const array = [...states]\r\n    const getValue = s => s instanceof RXState ? s.value : s\r\n    const update=i=> remove = callback([...array.map(getValue)],i)\r\n    array.forEach((st, i) => {\r\n        if (st instanceof RXState) {\r\n            listRmv.push(st.onChange(() => {update(i)}))\r\n        }\r\n    })\r\n    update(-1)\r\n    return () => {\r\n        listRmv.splice(0,listRmv.length).map(fn => fn?.())\r\n        if (remove instanceof Function) remove(-1, [...array].map(getValue))\r\n    }\r\n}","import useState from \"./useState.js\";\r\n\r\nexport function useProps(props = {}) {\r\n    if(typeof props !=\"object\") throw new Error(\"props doit être une object\")\r\n    return {\r\n        ...Object.entries(props).reduce((prop, [key, value]) => ({ ...prop, [key]: (key === \"children\" || key.startsWith(\"$\"))? value :useState.isState(value) ?value : useState(value)[0] }), {})\r\n    }\r\n}","const handlerEvent = {\r\n    beforeDispatch: (...args) => [...args],\r\n    afterDispatch: (data, returnValue) => [data, returnValue],\r\n    onSubscribe: callback => callback,\r\n    clearAfterEachDispatch:false\r\n}\r\nexport function useEvent(handler = handlerEvent) {\r\n    if (typeof handler !== \"object\") throw new Error(\"handler doit être un object\")\r\n    const { beforeDispatch=handlerEvent.beforeDispatch, afterDispatch=handlerEvent.afterDispatch, onSubscribe=handlerEvent.onSubscribe,clearAfterEachDispatch=handlerEvent.clearAfterEachDispatch} = handler\r\n    const EVENTS = new Set()\r\n    const subscribe = (callback) => {\r\n        if (!(callback instanceof Function)) throw new Error(\"callback doit être un function\")\r\n        callback = onSubscribe(callback)\r\n        if (callback instanceof Function) EVENTS.add(callback)\r\n        return () => EVENTS.delete(callback)\r\n    }\r\n    return [subscribe, (data,...rest) => {\r\n        const args = beforeDispatch(data,...rest)\r\n        const returnValue = EVENTS.forEach(fn => fn?.(...(Array.isArray(args)?args:[args])))\r\n        if(clearAfterEachDispatch)EVENTS.clear();\r\n        return afterDispatch(data, returnValue)\r\n    }]\r\n}","import useState, { RXState } from \"./useState.js\"\r\n\r\nexport function useMemo(callback, states = []) {\r\n    if (!Array.isArray(states)) throw new Error(\"states doit être une Array\")\r\n    const listRmv = []\r\n    const [state,setState]=useState()\r\n    const array = [...states]\r\n    const getValue = s => s instanceof RXState ? s.value : s\r\n    const update=i=> setState(callback([...array.map(getValue)],i))\r\n    array.forEach((st, i) => {\r\n        if (st instanceof RXState) {\r\n            listRmv.push(st.onChange(() => {update(i)}))\r\n        }\r\n    })\r\n    update(-1)\r\n    state.onCleanup(()=>listRmv.splice(0,listRmv.length).map(fn => fn?.()))\r\n    return state\r\n}","import { useEvent } from \"../hooks/useEvent.js\"\r\nimport { RXState } from \"../hooks/useState.js\"\r\nconst DATABASE = new Map()\r\nfunction createHandler(dom) {\r\n    if (!(dom instanceof Node)) throw new Error(\"dom doit etre un instance de Node\")\r\n    if (DATABASE.get(dom)) return DATABASE.get(dom)\r\n    let isDestroyed = false\r\n    let destroyList = []\r\n    const [onReady, dispatchReady] = useEvent({ clearAfterEachDispatch: true })\r\n    const [onConnected, dispatchConnected] = useEvent({ clearAfterEachDispatch: true })\r\n    let isReady = false\r\n    onReady(() => isReady = true)\r\n    const $children = [...dom.childNodes]\r\n    const textRef = new Text()\r\n    const root = new Text()\r\n    const fiber = null\r\n    const getTextRoot = () => Promise.resolve().then(() => {\r\n        if (dom.parentNode) {\r\n            dom.after(textRef)\r\n            dom.after(root)\r\n        } else if (root.parentNode) {\r\n            root.after(textRef)\r\n        }\r\n        return textRef\r\n    })\r\n    const isValid = () => { if (isDestroyed) throw new Error(\"cette dom est deja considerer comme detruit, donc vous ne peux plus faire cette action...\"); return true }\r\n    function onCleanUp(callback) {\r\n        isValid()\r\n        if (callback instanceof RXState && callback.value instanceof Function) {\r\n            const state = callback\r\n            callback = (...args) => {\r\n                if (!(state.value instanceof Function)) throw new Error(\"state.value doit etre une function\")\r\n                state.value(...args)\r\n            }\r\n        } else if (Array.isArray(callback)) {\r\n            callback.map(fn => handler.onDestroy(fn))\r\n            return\r\n        }\r\n        if ((callback instanceof Function)) {\r\n            destroyList.push(callback)\r\n        }\r\n    }\r\n    const handler = Object.defineProperties({}, {\r\n        getFiber: () => fiber,\r\n        \"onConnected\": {\r\n            get: () => isValid() && onConnected,\r\n            set: val => isValid() && onConnected(val)\r\n        },\r\n        \"onReady\": {\r\n            get: () => isValid() && onReady,\r\n            set: val => isValid() && onReady(val)\r\n        },\r\n        \"isReady\": {\r\n            get: () => isReady,\r\n        },\r\n        \"dispatchReady\": {\r\n            get: () => isValid() && dispatchReady,\r\n        },\r\n        \"dispatchConnected\": {\r\n            get: () => isValid() && dispatchConnected\r\n        },\r\n        \"model\": {},\r\n        isDestroyed: {\r\n            get() { return isDestroyed }\r\n        },\r\n        isClean: {\r\n            get() { return isDestroyed }\r\n        },\r\n        \"destroyList\": { get() { return isValid() && [...destroyList] } },\r\n        \"destroy\": {\r\n            value: (withDom = false) => {\r\n                if (dom instanceof Node && !(dom instanceof DocumentFragment)) {\r\n                    dom.remove()\r\n                }\r\n                if (isDestroyed) return\r\n                handler.destroyList.map(fn => fn instanceof Function && fn(withDom))\r\n                isDestroyed = true\r\n                destroyList = []\r\n                if (dom instanceof Text && withDom) {\r\n                    dom.data = \"\"\r\n                }\r\n                handler.$children.map(el => el instanceof Node && DomController.$(el).destroy())\r\n            },\r\n            writable: false\r\n        },\r\n        \"onCleanup\": {\r\n            get() { return isValid() && onCleanUp },\r\n            set(value) { isValid() && onCleanUp(value) }\r\n        },\r\n        \"$children\": {\r\n            get() { return [...$children] },\r\n            set(value) {\r\n                value = Array.isArray(value) ? value : [value]\r\n                $children.push(...value)\r\n            }\r\n        },\r\n        getTextRoot: {\r\n            value: getTextRoot,\r\n            writable: false\r\n        },\r\n        textRef: {\r\n            get() { return textRef }\r\n        }\r\n\r\n    })\r\n    handler.onConnected(() => {\r\n        if (dom.parentNode) {\r\n            dom.after(root)\r\n        }\r\n    })\r\n    if (dom.isConnected) {\r\n        Promise.resolve().then(() => dispatchConnected(dom.parentElement))\r\n    } else {\r\n        dom.onconnected = () => {\r\n            console.log(\"wala\");\r\n            dispatchConnected(dom.parentElement)\r\n        }\r\n    }\r\n    DATABASE.set(dom, handler)\r\n    return handler\r\n}\r\nexport class DomController {\r\n    static $(dom) {\r\n        return createHandler(dom)\r\n    }\r\n    static children(...children) {\r\n        children = children.flat(Infinity)\r\n        return children\r\n    }\r\n    static getFiberOf(dom) { this.$(dom).getFiber() }\r\n}\r\n","\r\nconst rxErrorConfig={\r\n    lang:\"en\",\r\n    usePrettyLog:false\r\n}\r\n\r\nconst codeLogError= {\r\n    \"fr\":{\r\n        0:data=>\"\",\r\n    },\r\n    \"en\":{\r\n\r\n    }\r\n}\r\nconst CODES=[]\r\nexport function rxError({code,lang={fr:(data)=>\"rxError\",en:(data)=>\"rxError\"}}) {\r\n    if(CODES.includes(code)) throw new Error(\"ce code is already used\")\r\n    if(typeof lang !=\"object\")throw new Error(\"lang must be an object\")\r\n    CODES.push(code)\r\n    Object.entries(lang).map(([name,value])=>{\r\n        codeLogError[name][code]=(data)=>{\r\n            if(!(value instanceof Function)) throw new Error(\"each value of lang must be a function\")\r\n            return value(data)\r\n        }\r\n    })\r\n}\r\nexport function getStack(){\r\n    let stackString=\"\"\r\n    try {\r\n        throw new Error()\r\n    } catch (error) {\r\n        const stacks=error.stack.split(/at\\s(.+)\\s*/).slice(2).filter(e=>e).map(at=>{\r\n            const nameOfFunction=at.slice(0,at.indexOf(\" \"))\r\n            const file=at.slice(at.lastIndexOf(\"/\")+1,-1).split(\":\")\r\n            return {\r\n                at,\r\n                nameOfFunction,\r\n                source:at.slice(at.indexOf(\" \")+1).slice(1,-1),\r\n                fileName:file[0],\r\n                row:file[1],\r\n                col:file[2],\r\n            }\r\n        })\r\n        stacks.at(-1).source=\"h\"+stacks.at(-1).source+error.stack.at(-1)\r\n        stacks.at(-1).nameOfFunction=stacks.at(-1).nameOfFunction+error.stack.at(-1)\r\n        stackString=stacks\r\n    }\r\n    return stackString\r\n}\r\nexport default function getLogError(code=0,data=null){\r\n    try {\r\n        return codeLogError[rxErrorConfig[\"lang\"]][code](data)\r\n    } catch (error) {\r\n        return codeLogError[rxErrorConfig[\"lang\"]][0](data)\r\n    }\r\n}\r\n\r\nrxError({\r\n    code:0,\r\n    lang:{\r\n        fr:(data)=>{\r\n            return `rxError:${data}`\r\n        },\r\n        en:(data)=>{\r\n            return `rxError:${data}`\r\n        }\r\n    }\r\n})","\r\nexport function createRegExp(...regs){\r\n    return regs.reduce((regFinal,reg)=>new RegExp(regFinal.source+reg.source))\r\n}\r\nfunction getRegSource(reg){\r\n    return typeof reg==\"string\"?reg:reg.source\r\n}\r\nexport function combineRegExp(...regs){\r\n    return regs.reduce((regFinal,reg)=>new RegExp(regFinal.source+getRegSource(reg)))\r\n}\r\nexport function combineAndSaveRegExp(...regs){\r\n    return new RegExp(`(${combineRegExp(...regs).source})`)\r\n}\r\nexport function combineAndNoSaveRegExp(...regs){\r\n    return new RegExp(`(?:${combineRegExp(...regs).source})`)\r\n}\r\nexport function createRegExpSaved(...regs){\r\n    return new RegExp(`(${createRegExp(...regs).source})`)\r\n}\r\nexport function createRegExpSplit(...regs){\r\n    return createRegExpSaved(regs.reduce((regFinal,reg)=>new RegExp(regFinal.source+\"|\"+reg.source)))\r\n}","import { createRegExpSplit } from \"./RgExp.js\"\r\n\r\nexport class TemplateRef extends Array {\r\n    static get regExp() { return /\\(_\\|-\\[RXRefs\\{index:\\d+,type:[\\w\\$]+\\}\\]-\\|_\\)/ }\r\n    static get regExpSaved() { return /\\(_\\|-\\[RXRefs\\{index:(?<index>\\d+),type:(?<type>[\\w\\$]+)\\}\\]-\\|_\\)/ }\r\n    static get regExpSavedG() { return /\\(_\\|-\\[RXRefs\\{index:(?<index>\\d+),type:(?<type>[\\w\\$]+)\\}\\]-\\|_\\)/g }\r\n    static {\r\n        this.split = function (chaine = \"\", includeResults = true) {\r\n            if (typeof chaine != \"string\") throw new Error(\"chaine doit etre une chaine de caractere\")\r\n            const reg = includeResults ? createRegExpSplit(this.regExp) : this.regExp\r\n            const result = chaine.split(reg).reduce((l, item) => {\r\n                if (!item) return l\r\n                const r = this.parse(item)\r\n                if (r && includeResults instanceof Function) item = includeResults(r)\r\n                l.push(item)\r\n                return l\r\n            }, [])\r\n            return result\r\n        }\r\n        this.replaceAll = function (chaine, value = \"\") {\r\n            if (typeof chaine != \"string\") throw new Error(\"chaine doit etre une chaine de caractere\")\r\n            return chaine.replaceAll(this.regExpSavedG, (input, index, type) => value instanceof Function ? value({ input, index, type }) : value)\r\n        }\r\n        this.parse = function (chaine = \"\", refs = null) {\r\n            if (typeof chaine != \"string\") throw new Error(\"chaine doit etre une chaine de caractere\")\r\n            const result = /\\(_\\|-\\[RXRefs\\{index:(?<index>\\d+),type:(?<type>[\\w\\$]+)\\}\\]-\\|_\\)/.exec(chaine)\r\n            const value = refs ? this.split(chaine, ({ index }) => refs[index]) : null\r\n            const valueString = value ? value.join('') : \"\"\r\n            return result ? {\r\n                index: result.groups.index,\r\n                type: result.groups.type,\r\n                input: result.input,\r\n                value, valueString, refs\r\n            } : null\r\n        }\r\n    }\r\n    constructor(...refs) {\r\n        super()\r\n        this.push(...refs)\r\n        this.components={}\r\n    }\r\n}","import { useState, RXState, useLayoutEffect, useMemo, useRef } from \"../../hooks/indexHooks.js\"\r\nimport { DomController } from \"../domController.js\"\r\nimport { TemplateRef } from \"../templateRef.js\"\r\n\r\nconst customeElementRegistry = {}\r\n\r\nconst regExpDirective = /^(?<directiveName>(?:[A-z][\\w\\-]*:)|@|#)(?<arg>[\\w-]*)(?<modifiers>\\[[\\w\\-,]*\\])?$/\r\nconst directiveOption = {\r\n    el: null,\r\n    attrName: \"\",\r\n    attrValue: \"\",\r\n    directiveName: \"\",\r\n    arg: \"\",\r\n    modifiers: {},\r\n    index: 0\r\n}\r\nexport class FiberOfNode {\r\n    #components = ({ ...customeElementRegistry })\r\n    get components() { return this.#components }\r\n    set components(components) {\r\n        Object.assign(this.#components, components)\r\n    }\r\n    refs = new TemplateRef()\r\n    directives = {\r\n        $onInit({ attrValue, el} = directiveOption){\r\n            attrValue=attrValue instanceof RXState?attrValue.value:attrValue\r\n            if(attrValue instanceof Function){\r\n                DomController.$(el).onCleanup=attrValue(el)\r\n                return\r\n            }\r\n            console.warn(\"$onInit.attrValue doit être de type Function\")\r\n        },\r\n        $shadowRoot({ attrValue, el, arg } = directiveOption) {\r\n            const elementsCanAttachShadowRoot = [\"article\", \"aside\", \"blockquote\", \"body\", \"div\", \"footer\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"main\", \"nav\", \"p\", \"section\", \"span\"]\r\n            if (elementsCanAttachShadowRoot.includes(el.localName) || el.localName.includes(\"-\")) {\r\n                let callback\r\n                if (attrValue instanceof RXState) attrValue = attrValue.value\r\n                if (attrValue instanceof Function) callback = attrValue\r\n                const oldChildren = [...el.childNodes]\r\n                const root = el.attachShadow({ mode: arg === \"closed\" ? \"closed\" : \"open\" })\r\n                const returnValue = callback instanceof Function ? callback({ el, root, children: oldChildren }) : oldChildren\r\n                const children = Array.isArray(returnValue) ? returnValue : [returnValue]\r\n                el.innerHTML = \"\"\r\n                root.append(...children)\r\n            } else {\r\n                console.warn(`l'element ${el.localName} ne suporte pas le attachShadow. Seule les element personnalisé (balise avec un tiré) et quelque element native le supporte,\r\n                voici une liste d'element qui le support:`, elementsCanAttachShadowRoot);\r\n            }\r\n        },\r\n        $attrState({ attrValue, el, setAttribute } = directiveOption) {\r\n            let cleanup\r\n            if (attrValue instanceof RXState) {\r\n                const update = (name, value) => {\r\n                    if (cleanup instanceof Function) cleanup();\r\n                    cleanup = setAttribute(el, name, value ?? \"\")\r\n                }\r\n                return attrValue.onChange((value, oldValue) => {\r\n                    if (value && typeof value == \"object\") {\r\n                        if (oldValue && typeof oldValue == \"object\") {\r\n                            const isAsOld = value.attrName === oldValue.attrName && value.attrValue === oldValue.attrValue\r\n                            if (!isAsOld) {\r\n                                update(value.attrName, value.attrValue ?? \"\")\r\n                            }\r\n                        } else {\r\n                            update(value.attrName, value.attrValue ?? \"\")\r\n                        }\r\n                    } else {\r\n                        update(value, \"\")\r\n                    }\r\n                    return cleanup\r\n                }, true)\r\n            }\r\n            return setAttribute(el, attrValue, true)\r\n        },\r\n        $if({ attrValue, el, index, data ,arg} = directiveOption) {\r\n            index = Math.random()\r\n            if (typeof data.listCondition != \"object\") data.listCondition = {}\r\n            const getValue = (value) => value instanceof Function ? value(el) : !!value\r\n            const hasValidNow=()=>Object.values(data.listCondition).every(isTrue => isTrue)\r\n            // const makeVisible = (isVisible = hasValidNow()) => el.getTextRoot()\r\n            const makeVisible = (isVisible = hasValidNow()) =>DomController.$(el).getTextRoot()\r\n                .then(textRef => {\r\n                    if(!textRef.parentNode){\r\n                        // return el.onConnected(()=>el.getTextRoot().then(()=>hasValidNow() ? textRef.after(el) : el.remove()))\r\n                        return DomController.$(el).onConnected(()=>DomController.$(el).getTextRoot().then(()=>hasValidNow() ? textRef.after(el) : el.remove()))\r\n                    }\r\n                    return textRef.parentNode && isVisible ? textRef.after(el) : el.remove()\r\n                })\r\n            if (attrValue instanceof RXState) {\r\n                return attrValue.onChange((value) => {\r\n                    const v=getValue(value)\r\n                    data.listCondition[index] =arg==\"false\"?!v:v\r\n                    makeVisible()\r\n                    return () => {\r\n                        delete data.listCondition[index]\r\n                        attrValue.destroy(true)\r\n                    }\r\n                }, true)\r\n            } else {\r\n                data.listCondition[index] = getValue(attrValue)\r\n                makeVisible()\r\n            }\r\n            return () => data.listCondition[index] = true\r\n        },\r\n        $ref({ el, attrValue } = directiveOption) {\r\n            if (attrValue instanceof RXState) {\r\n                attrValue=attrValue.value\r\n            }\r\n            if (attrValue instanceof Function) {\r\n                return attrValue(el)\r\n            }else if (useRef.isRef(attrValue)){\r\n                attrValue.current=el\r\n            }\r\n        },\r\n        $show({ el: dom, attrValue } = directiveOption) {\r\n            if (attrValue instanceof RXState) {\r\n                return attrValue.onChange((isShow) => {\r\n                    dom.hidden = !isShow\r\n                    return () => attrValue.destroy(true)\r\n                }, true)\r\n            } else {\r\n                dom.hidden = !attrValue\r\n            }\r\n        },\r\n        $bind({ el, arg, modifiers, attrValue } = directiveOption) {\r\n            const fnRmvs = []\r\n            if (attrValue instanceof RXState) {\r\n                fnRmvs.push(attrValue.onChange((v) => {\r\n                    if (arg in el) {\r\n                        el[arg] = v\r\n                    } else {\r\n                        el.setAttribute(arg, v)\r\n                    }\r\n                    return () => attrValue.destroy(true)\r\n                }, true))\r\n            }\r\n            const handlerEvent = () => {\r\n                const value = arg in el ? el[arg] : el.getAttribute(arg)\r\n                if (attrValue instanceof RXState) attrValue.set(value)\r\n            }\r\n            fnRmvs.push(...Object.keys(modifiers).map(eventName => {\r\n                el.addEventListener(eventName, handlerEvent)\r\n                return () => el.removeEventListener(eventName, handlerEvent)\r\n            }))\r\n            if (Object.keys(modifiers).length == 0) {\r\n                const eventName = [\"input\"].includes(el.localName) ? \"input\" : \"change\"\r\n                el.addEventListener(eventName, handlerEvent)\r\n                fnRmvs.push(() => el.removeEventListener(eventName, handlerEvent))\r\n            }\r\n            return () => fnRmvs.map(fn => fn())\r\n        },\r\n        $directives({ el, arg, modifiers, attrValue } = directiveOption) {\r\n            if (attrValue instanceof RXState) attrValue = attrValue.value\r\n            if (typeof attrValue == \"object\") {\r\n                Object.assign(this, attrValue)\r\n            }\r\n        }\r\n    }\r\n    initProps(refs = this.refs) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        const getrefs = ({ index }) => this.refs[index]\r\n        const generateKey = (data, key) => {\r\n            const gk = () => {\r\n                let i = Math.round(Math.random() * 100_000_000)\r\n                while ((key + `<${i}>`) in data) { i++ }\r\n                key += `<${i}>`\r\n                return key\r\n            }\r\n            if (key in data) {\r\n                if (key.includes(\"<\") && key.includes(\">\") && key.at(-1) == \">\") {\r\n                    const indexA = key.indexOf(\"<\")\r\n                    key = key.slice(0, indexA)\r\n                }\r\n                return gk()\r\n            }\r\n            return key\r\n        }\r\n        this.props = Object.entries(this.props).reduce((props, [attrName, value]) => {\r\n            const originalAttrName = attrName\r\n            const attrNameComputed = TemplateRef.parse(attrName, this.refs)\r\n            const valueArray = typeof value == \"string\" ? TemplateRef.split(value ?? \"\", getrefs) : [value]\r\n\r\n\r\n            if (/^\\s*$/.test(valueArray[0]) && !(valueArray[0] instanceof RXState)) valueArray.shift()\r\n            if (/^\\s*$/.test(valueArray.at(-1)) && !(valueArray[0] instanceof RXState)) valueArray.pop()\r\n\r\n            let hasValueFinal = false\r\n            let valueFinal\r\n            const getValue = () => {\r\n                if (hasValueFinal) return valueFinal\r\n                hasValueFinal = true\r\n                if (valueArray.length == 0) {\r\n                    valueFinal = \"\"\r\n                    return \"\"\r\n                }\r\n                if (valueArray.length == 1) {\r\n                    valueFinal = valueArray[0]\r\n                    return valueArray[0]\r\n                }\r\n                const stateValue = useMemo(() => valueArray.join(\"\") , valueArray)\r\n                valueFinal = stateValue\r\n                return stateValue\r\n            }\r\n            if (attrNameComputed) {\r\n                let hasCallback = false\r\n                const hasState = !!attrNameComputed.value.find(v => {\r\n                    if (v instanceof Function) {\r\n                        hasCallback = true\r\n                    }\r\n                    return v instanceof RXState\r\n                })\r\n                const isDirective = attrNameComputed.value[0] == \"$\" && attrNameComputed.value[1] instanceof Function\r\n                const createMemo = () => useMemo(() => ({\r\n                    attrName: attrNameComputed.value.map(v => v instanceof Function ? v.name : v instanceof RXState ? v.toString() : typeof v == \"object\" ? v?.constructor?.name : v).join(\"\"),\r\n                    attrValue: getValue()\r\n                }), [...attrNameComputed.value])\r\n\r\n                if (isDirective) {\r\n                    const callback = attrNameComputed.value[1]\r\n                    const id = Math.round(Math.random() * 1_000_000)\r\n                    const callbackName = (callback.name[0] == \"$\" ? callback.name : \"$\" + callback.name) + \"{\" + id + \"}\"\r\n                    this.directives[callbackName] = callback\r\n                    let key = \"$attrState\"\r\n                    key = generateKey(props, key)\r\n                    attrNameComputed.value[0] = \"\"\r\n                    attrNameComputed.value[1] = callbackName\r\n                    const attr = createMemo()\r\n                    props[key] = attr\r\n                    return props\r\n                } else if (hasState) {\r\n                    let key = \"$attrState\"\r\n                    key = generateKey(props, key)\r\n                    const attr = createMemo()\r\n                    props[key] = attr\r\n                    return props\r\n                } else if (hasCallback) {\r\n                    const lnc = [...attrNameComputed.value] // list Name Computed\r\n                    if (lnc[0] instanceof Function && lnc.length == 1) {\r\n                        let key = \"$onInit\"\r\n                        key = generateKey(props, key)\r\n                        props[key] = lnc[0]\r\n                        return props\r\n                    } else {\r\n                        let key = [...attrNameComputed.value].map(v => v instanceof Function ? v.name : v).join(\"\")\r\n                        key = generateKey(props, key)\r\n                        props[key] = getValue()\r\n                        return props\r\n                    }\r\n                } else if (attrNameComputed.value[0] instanceof Object && attrNameComputed.value.length === 1) {\r\n                    if (value != \"\") return props\r\n                    if (attrNameComputed.value[0].constructor !== Object) return props\r\n                    Object.entries(attrNameComputed.value[0]).map(([k, v]) => {\r\n                        k = generateKey(props, k)\r\n                        props[k] = v\r\n                    })\r\n                    return props\r\n                } else {\r\n                    attrName = attrNameComputed.valueString\r\n                }\r\n            }\r\n            let ismustState=false\r\n            if(attrName[0]==\":\"){\r\n                ismustState=true\r\n                attrName=attrName.slice(1)\r\n            }\r\n            if (attrName == \"children\") {\r\n                props.children = value\r\n                return props\r\n            }\r\n            attrName = generateKey(props, attrName)\r\n            props[attrName] = ismustState?useMemo(()=>getValue()):getValue()\r\n            return props\r\n        }, {})\r\n    }\r\n    constructor() {}\r\n    type\r\n    props\r\n    #dom\r\n    #parent\r\n    get parent(){return this.#parent}\r\n    set parent(parentFiber){\r\n        if(!(parentFiber instanceof FiberOfNode)) throw new Error('parentFiber doit être une instance FiberOfNode')\r\n        this.#parent=parentFiber\r\n    }\r\n    get dom(){\r\n        return this.#dom\r\n    }\r\n    set dom(domValue){\r\n        if(this.#dom) throw new Error(\"dom a déja une valeur Node \")\r\n        if(!(domValue instanceof Node)) throw new Error(\"domValue doit être une instance de Node\")\r\n        this.#dom=domValue\r\n    }\r\n}\r\nexport { customeElementRegistry }","import {TemplateRef} from \"../templateRef.js\"\r\nimport {FiberOfNode} from \"./FiberOfNode.js\"\r\n\r\nexport class FiberOfElement extends FiberOfNode {\r\n    constructor(type, props = {}, refs=new TemplateRef()) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        super()\r\n        this.type = type\r\n        this.refs = refs\r\n        this.props = Object.freeze({\r\n            ...props,\r\n            children: props.children?? []\r\n        })\r\n        this.props.children.map((child,index)=>{\r\n            if(child instanceof DocumentFragment){\r\n                this.props.children[index]=[...child.$children]\r\n            }\r\n        })\r\n        this.initProps(this.refs)\r\n        this.components=this.refs.components\r\n        if(this.components[type]){\r\n            this.type=this.components[type]\r\n        }\r\n        Object.freeze(this)\r\n    }\r\n}","import { TemplateRef } from \"../templateRef.js\"\r\nimport {FiberOfNode} from \"./FiberOfNode.js\"\r\n\r\nexport class FiberOfFragment extends FiberOfNode {\r\n    constructor(children, refs=new TemplateRef()) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        super()\r\n        this.refs = refs\r\n        this.type = \"FRAGMENT\"\r\n        this.props = Object.freeze({\r\n            children:children ?? []\r\n        })\r\n        this.initProps(this.refs)\r\n        Object.freeze(this)\r\n    }\r\n}","import { TemplateRef } from \"../templateRef.js\"\r\nimport {FiberOfNode} from \"./FiberOfNode.js\"\r\n\r\nexport class FiberOfText extends FiberOfNode {\r\n    constructor(text, refs=new TemplateRef()) {\r\n        if (!(refs instanceof TemplateRef)) throw new Error(\"refs must be an instance of RXRefs\")\r\n        super()\r\n        this.refs = refs\r\n        this.type = \"TEXT\"\r\n        this.props = Object.freeze({\r\n            nodeValue: text,\r\n            children: []\r\n        })\r\n        Object.freeze(this)\r\n        if(this.props.nodeValue instanceof Node ) {\r\n            if(this.props.nodeValue instanceof DocumentFragment){\r\n                console.log([...this.props.nodeValue.$children]);\r\n            }\r\n            return this.props.nodeValue\r\n        }\r\n        if (this.props.nodeValue instanceof FiberOfNode) return this.props.nodeValue\r\n    }\r\n}","import { useEvent, RXState } from \"../hooks/indexHooks.js\"\r\nimport { DomController } from \"./domController.js\"\r\nimport { getStack } from \"./rxError.js\"\r\n\r\nimport { FiberOfElement, FiberOfFragment, FiberOfNode, FiberOfText } from \"./RxFiber/indexOfFiber.js\"\r\nimport { TemplateRef } from \"./templateRef.js\"\r\n\r\nconst needCallback = (callback, args, $this) => callback.apply($this, args)\r\nneedCallback.after = (callback, args, $this) => Promise.resolve().then(() => callback.apply($this, args))\r\nneedCallback.idle = (callback, args, $this) => requestIdleCallback(() => callback.apply($this, args))\r\n\r\n\r\nfunction createElement(fiber) {\r\n    const sendListOfDom = (list) => list.flat(Infinity).map(child => createDom(child))\r\n    if (fiber instanceof Node) return fiber\r\n    if (fiber instanceof FiberOfNode && fiber.dom instanceof Node) return fiber.dom\r\n    if (fiber instanceof FiberOfFragment) {\r\n        return sendListOfDom(fiber.props.children)\r\n    }\r\n    if (fiber instanceof FiberOfText) {\r\n        if (Array.isArray(fiber.props.nodeValue)) {\r\n            return sendListOfDom(fiber.props.nodeValue)\r\n        }\r\n        return fiber.props.nodeValue instanceof Node ? fiber.props.nodeValue : new Text(fiber.props.nodeValue)\r\n    }\r\n    if (fiber instanceof FiberOfElement) {\r\n        if (fiber.components[fiber.type] instanceof Function) {\r\n            const component = fiber.components[fiber.type]\r\n            fiber.type = component\r\n        }\r\n        if (fiber.type instanceof Function) {\r\n            let props = fiber.props\r\n            if (typeof fiber.type.defaultProps == \"object\") props = { ...fiber.type.defaultProps, ...props }\r\n            const el = fiber.type(props)\r\n            return createDom(el)\r\n        }\r\n        return document.createElement(fiber.type)\r\n    }\r\n    if (Array.isArray(fiber)) {\r\n        return sendListOfDom(fiber)\r\n    }\r\n    if (fiber instanceof Function) {\r\n        let props = { children: [] }\r\n        if (typeof fiber.defaultProps == \"object\") props = { ...fiber.defaultProps, children: [] }\r\n        return createDom(fiber(props))\r\n    }\r\n    if (fiber instanceof RXState) {\r\n        return createDom(new FiberOfText(fiber, new TemplateRef()))\r\n    }\r\n    try {\r\n        return new Text(JSON.stringify(fiber))\r\n    } catch (error) {\r\n        return new Text(fiber)\r\n    }\r\n}\r\nfunction initProps(dom, fiber) {\r\n    if (!(dom instanceof Node)) throw new Error('dom doit etre un element node')\r\n    if (!(dom instanceof HTMLElement)) return null\r\n    if (fiber && fiber.type instanceof Function) return null;\r\n    if (!(fiber instanceof FiberOfElement)) return null\r\n    const globalData = {}\r\n    const counterName = {}\r\n    \r\n    const setOneAttribute = (props, [attrName, attrValue], dom, listOnCleanup = []) => {\r\n        const setAttribute = (value, domEl = dom, attrN = attrName) => {\r\n            if (/^\\s*$/.test(attrN)) return\r\n            if (domEl instanceof HTMLSelectElement && [\"multiple\",].includes(attrN)) {\r\n                domEl.multiple = true\r\n            } else\r\n                if ([\"disabled\", \"hidden\"].includes(attrN)) {\r\n                    // console.log(value);\r\n                    // domEl.setAttribute(attrN,\"\")\r\n                    return domEl[attrN] = value === \"\" ? true : value\r\n                } else if ((attrN in domEl) || ([\"object\", \"function\"].includes(typeof value))) {\r\n                    if (typeof value == \"object\" && typeof domEl[attrN] == \"object\") return Object.assign(domEl[attrN], value)\r\n                    return domEl[attrN] = value\r\n                }\r\n            domEl.setAttribute(attrN, value)\r\n        }\r\n        const setAttr = (el, attrName, attrValue) => {\r\n            const listrmv = []\r\n            setOneAttribute(props, [attrName, attrValue], el, listrmv)\r\n            return () => needCallback(() => listrmv.map(fn => fn instanceof Function && fn()/** */))\r\n        }\r\n        const rendAttribute = (update, onRemove) => {\r\n            const redOneStyle = (value) => {\r\n                if (value instanceof RXState) {\r\n                    // dom.onCleanup = value.onChange((val, oldVal) => {\r\n                    DomController.$(dom).onCleanup = value.onChange((val, oldVal) => {\r\n                        update(val, oldVal)\r\n                        return () => value.destroy()\r\n                    }, true)\r\n                } else {\r\n                    update(value)\r\n                }\r\n            }\r\n            if (Array.isArray(attrValue)) {\r\n                attrValue.map(val => redOneStyle(val))\r\n            } else {\r\n                redOneStyle(attrValue)\r\n            }\r\n            DomController.$(dom).onCleanup = () => onRemove instanceof Function && onRemove()\r\n        }\r\n        const toClean = () => null\r\n        let cleanup = toClean\r\n        let resultReg\r\n        const rcState = attrValue\r\n        const originalAttrName = attrName\r\n        const res = /^([^<>]+)<\\d+>$/.exec(attrName)\r\n        if (res) { attrName = res[1] }\r\n        if (attrName == \"children\" || !(fiber instanceof FiberOfElement)) return props\r\n        if (typeof attrName != \"string\") return props\r\n\r\n        if (attrName && (attrName.startsWith('on') || attrName.startsWith('@'))) {\r\n\r\n            let type = attrName.slice(attrName.startsWith('on') ? 2 : 1).toLowerCase()\r\n            if (type.indexOf(\"<\") > -1) {\r\n                type = type.slice(0, type.indexOf(\"<\"))\r\n            }\r\n            const applyCallback = (fn, args = []) => {\r\n                if (fn instanceof RXState) {\r\n                    fn = fn.isDestroyed ? () => null : fn.value\r\n                }\r\n                return fn(...args)\r\n            }\r\n            const callback = (...args) => {\r\n                if (Array.isArray(attrValue)) {\r\n                    return attrValue.map(fn => applyCallback(fn, args))\r\n                }\r\n                applyCallback(attrValue, args)\r\n            }\r\n            let removeEv = () => dom.removeEventListener(type, callback)\r\n            DomController.$(dom).onCleanup(removeEv)\r\n            // dom.onDestroy(removeEv)\r\n            dom.addEventListener(type, callback)\r\n            cleanup = () => removeEv\r\n            return props\r\n        } else if (attrName[0] == \".\") {\r\n            const oldValue = dom[attrName.slice(1)]\r\n            dom[attrName.slice(1)] = attrValue\r\n            cleanup = () => dom[attrName.slice(1)] = oldValue\r\n            return props\r\n        } else if (resultReg = /^(?<name>(?:\\$|\\:)[^\\s</>\\:\\[\\]]+)(?:\\:(?<arg>[^\\s</>:\\[\\]]*)(\\[(?<modifiers>[^\\s</>\\[\\]]*)\\])?)?(?:\\<(?<index>\\d+)\\>)?$/.exec(attrName)) {\r\n            const { name, arg, modifiers } = resultReg.groups\r\n            counterName[name] = name in counterName ? counterName[name] + 1 : 0\r\n            if (fiber.directives[name] instanceof Function) {\r\n                let index = counterName[name]\r\n                const directivesMustSync = [\"$ref\"]\r\n                const callback = directivesMustSync.includes(name) ? needCallback : needCallback.after\r\n                callback(() => {\r\n                    if (!globalData[name]) globalData[name] = {}\r\n                    const rmv = fiber.directives[name]({\r\n                        setAttribute: setAttr,\r\n                        globalData,\r\n                        data: globalData[name],\r\n                        el: dom, attrName, attrValue,\r\n                        index: index ? Number(index) : 0,\r\n                        directiveName: name, arg,\r\n                        modifiers: modifiers?.split(',').reduce((data, modif) => { data[modif] = true; return data }, {}) || {}\r\n                    })\r\n                    if (rmv instanceof Function) {\r\n                        // dom.onDestroy(rmv)\r\n                        DomController.$(dom).onCleanup(rmv)\r\n                        cleanup = rmv\r\n                        listOnCleanup.push(cleanup)\r\n                    }\r\n                })\r\n            }\r\n            return props\r\n        } else if ([\"input\", \"select\", \"textarea\"].includes(dom.localName) && [\"value\", \"checked\"].includes(attrName) && (rcState instanceof RXState)) {\r\n            if ([\"select\"].includes(dom.localName) && dom instanceof HTMLSelectElement) {\r\n                dom.value = rcState.value\r\n                // dom.onReady(()=>{\r\n                DomController.$(dom).onReady(() => {\r\n                    dom.selectedIndex = -1\r\n                    let i = -1\r\n                    for (let opt of dom) {\r\n                        i++\r\n                        if (opt.value === rcState.value) {\r\n                            dom.selectedIndex = i\r\n                        }\r\n                    }\r\n                })\r\n                // dom.selectedIndex=2\r\n            }\r\n            const rmv = (e) => needCallback.after(() => {\r\n\r\n                if ([\"checkbox\"].includes(e.target.type)) {\r\n                    return rcState.set(e.target.checked)\r\n                }\r\n                return rcState.set(e.target[attrName])\r\n            })\r\n            dom.addEventListener('input', rmv)\r\n            cleanup = () => {\r\n                dom.removeEventListener(\"input\", rmv)\r\n                dom.value = \"\"\r\n            }\r\n            // dom.onDestroy(cleanup)\r\n            DomController.$(dom).onCleanup(cleanup)\r\n        } else if (attrName == \"style\" || /^style<\\d+>/.test(attrName)) {\r\n            const styleDefault = dom.style.cssText\r\n            const rendStyle = (value) => needCallback.after(() => {\r\n                if (value instanceof Object) {\r\n                    Object.assign(dom.style, value)\r\n                } else {\r\n                    dom.style.cssText += value\r\n                }\r\n            })\r\n            rendAttribute(rendStyle, () => rendStyle(styleDefault))\r\n            return props\r\n        } else if (attrName == \"class\" || /^class\\<\\d+\\>/.test(attrName)) {\r\n            const styleDefault = dom.getAttribute(\"class\")\r\n\r\n            const rendClass = (value, oldValue) => needCallback.after(() => {\r\n                const addValue = (_value) => String(_value).split(\" \").map(val => val && dom.classList.add(val))\r\n                const removeValue = (_value) => String(_value).split(\" \").map(val => val && dom.classList.remove(val))\r\n                Array.isArray(oldValue) ? oldValue.map(val => removeValue(val)) : removeValue(oldValue);\r\n                Array.isArray(value) ? value.map(val => addValue(val)) : addValue(value)\r\n            })\r\n            rendAttribute(rendClass, () => rendClass(styleDefault))\r\n            return props\r\n        } else if (attrName && attrName.startsWith('?')) {\r\n            attrName = /^([^<>]+)\\<\\d+\\>/.test(attrName) ? attrName.slice(0, attrName.indexOf(\"<\")) : attrName\r\n            if (!attrValue) return props\r\n            let rmvAttr//=setAttr(dom,attrName.slice(1),\"\")\r\n            const insertAttr = (value) => {\r\n                const inertAttr = (v) => setAttr(dom, attrName.slice(1), v)\r\n                if (typeof attrValue == \"object\") {\r\n                    const { when, value: val } = value\r\n                    if (when instanceof RXState) {\r\n                        let rmAt\r\n                        return when.onChange((isTrue) => {\r\n                            if (isTrue) {\r\n                                if (!rmAt) rmAt = inertAttr(val instanceof RXState ? val.get() : val)\r\n                            } else {\r\n                                if (rmAt) rmAt();\r\n                                rmAt = null\r\n                            }\r\n                            return () => rmAt && rmAt();\r\n                        }, true)\r\n                    } else {\r\n\r\n                        if (when) return inertAttr(val)\r\n                    }\r\n                } else {\r\n                    return inertAttr(value)\r\n                }\r\n            }\r\n            if (attrValue instanceof RXState) {\r\n\r\n            } else {\r\n                rmvAttr = insertAttr(attrValue)\r\n            }\r\n\r\n            const rmv = () => rmvAttr()\r\n            if (rmv instanceof Function) {\r\n                dom.onDestroy(rmv)\r\n                cleanup = rmv\r\n                listOnCleanup.push(cleanup)\r\n            }\r\n            return props\r\n        }\r\n        if (attrValue instanceof RXState) {\r\n            const state = attrValue\r\n            const clean = state.onChange(v => {\r\n                setAttribute(v)\r\n                return () => {\r\n                    state.destroy(true)\r\n                    dom.removeAttribute(attrName)\r\n                }\r\n            })\r\n            // dom.onDestroy(clean)\r\n            DomController.$(dom).onCleanup(clean)\r\n            attrValue = attrValue.value\r\n            listOnCleanup.push(clean)\r\n        }\r\n\r\n        setAttribute(attrValue)\r\n        if (cleanup === toClean) {\r\n            cleanup = () => {\r\n                dom.removeAttribute(attrName)\r\n            }\r\n        }\r\n        listOnCleanup.push(cleanup)\r\n        return props\r\n    }\r\n    Object.entries(fiber.props).reduce((props, [attrName, attrValue]) => setOneAttribute(props, [attrName, attrValue], dom), {})\r\n}\r\nconst updateArray = {\r\n    set(valueOfState, oldValueOfState, { methode, value, textRef, listElement }) {\r\n        if (!Array.isArray(listElement)) throw new Error(\"listElement doit être une Array\")\r\n        if (!Array.isArray(valueOfState)) throw new Error(\"valueOfState doit être une Array\")\r\n        textRef.$firstElement = listElement[0]\r\n        if (valueOfState.every(v => v instanceof Node)) {\r\n            const listDom = []\r\n            listElement.splice(0, listElement.length, ...valueOfState.map((item, indexItem) => {\r\n                const dom = createDom(item)\r\n                if (indexItem == 0) {\r\n                    if (textRef.$firstElement !== dom) {\r\n                        textRef.$firstElement = dom\r\n                        textRef.after(dom)\r\n                    }\r\n                } else if (listElement[indexItem] !== dom) {\r\n                    listDom.at(-1).after(dom)\r\n                } else { }\r\n                listDom.push(dom)\r\n                return dom\r\n            })).map(e => !listElement.find(_e => _e === e) && DomController.$(e).destroy(true))\r\n        } else {\r\n            listElement.splice(0, listElement.length, ...valueOfState.map(v => {\r\n                const dom = createDom(v)\r\n                textRef.before(dom)\r\n                return dom\r\n            })).map(e => DomController.$(e).destroy())\r\n        }\r\n    }\r\n}\r\nfunction updateDataBinding(state, textDom, dom, listElement) {\r\n    const remove = state.onChange((valueOfState, oldValueOfState, { methode, value, ...option }) => {\r\n        oldValueOfState instanceof Node && valueOfState !== oldValueOfState && oldValueOfState.destroy(true)\r\n\r\n        if (valueOfState instanceof Node) {\r\n            listElement.splice(0, listElement.length).map(el => el instanceof Node && el.destroy())\r\n            textDom.data = \"\"\r\n            needCallback.idle(() => textDom.after(valueOfState))\r\n            listElement.push(valueOfState)\r\n        } else {\r\n            textDom.data = valueOfState\r\n            if (Array.isArray(valueOfState)) {\r\n                textDom.data = \"\"\r\n                const args = [valueOfState, oldValueOfState, { ...option, methode, value, listElement, textRef: textDom }]\r\n                needCallback.after(() => {\r\n                    if (updateArray[methode] instanceof Function) {\r\n                        updateArray[methode](...args)\r\n                    } else {\r\n                        updateArray.set(...args)\r\n                    }\r\n                })\r\n            } else if (valueOfState instanceof FiberOfNode) {\r\n                textDom.data = \"\"\r\n                let isUpdate = true\r\n                // console.log(isUpdate);\r\n                listElement.splice(0, listElement.length).map(el => el instanceof Node && el.destroy())\r\n                isUpdate = false\r\n                const el = createDom(valueOfState)\r\n                listElement.push(el)\r\n                el.onDestroy(() => listElement.length && remove())\r\n                let isRended = false\r\n                const putAfter = (elRef, elTarget, isforced = false) => {\r\n                    if (isRended && !isforced) return true\r\n                    if (elRef.parentNode) {\r\n                        elRef.after(elTarget)\r\n                        isRended = true\r\n                        return true\r\n                    }\r\n                    return false\r\n                }\r\n\r\n                const rendLater = () => {\r\n                    putAfter(textDom, el)\r\n                    if (!isRended) return requestIdleCallback(rendLater)\r\n                }\r\n                requestIdleCallback(rendLater)\r\n                textDom.onConnected((p) => {\r\n                    if (p instanceof Node && textDom.parentNode !== p) {\r\n                        p.append(textDom)\r\n                        return putAfter(textDom, el, true)\r\n                    }\r\n                    putAfter(textDom, el)\r\n                })\r\n            } else if (typeof valueOfState == \"object\") {\r\n                try {\r\n                    textDom.data = JSON.stringify(valueOfState, null, 20)\r\n                } catch (error) { }\r\n            }\r\n        }\r\n        return (withDom = true) => {\r\n            textDom.data = \"\"\r\n            listElement.map(dom => dom.destroy(withDom))\r\n            if (oldValueOfState instanceof Node) {\r\n                oldValueOfState.destroy()\r\n            }\r\n            if (withDom) {\r\n                textDom.remove()\r\n                state.destroy(true)\r\n            }\r\n        }\r\n    }, true)\r\n    // dom.onDestroy(remove)\r\n    DomController.$(dom).onCleanup(remove)\r\n}\r\nfunction bindData(textDom, textFiber) {\r\n    if (!(textFiber.props.nodeValue instanceof RXState)) return textDom\r\n    let state = textFiber.props.nodeValue\r\n    const dom = Array.isArray(state.value) ? new DocumentFragment() : textDom\r\n    textFiber.dom = dom\r\n    // insertEventDom(dom)\r\n    if (Array.isArray(state.value)) dom.append(textDom)\r\n\r\n    if (!(textDom instanceof Text)) throw new Error(\"textDom doit être une instance de Text\")\r\n    // if (!(textDom.onDestroy instanceof Function)) throw new Error(\"textDom.onDestroy doit être une fonction\")\r\n\r\n    let listElement = []\r\n    // updateDataBinding(state, textDom, dom, listElement)\r\n    needCallback.after(() => updateDataBinding(state, textDom, dom, listElement))\r\n\r\n    return dom\r\n}\r\nfunction insertEventDom(dom) {\r\n    console.warn(123);\r\n    throw new Error(\"the function insertEventDom is deprecied..., Please use insertEventDom.$(dom)\")\r\n    if (!(dom instanceof Node)) throw new Error(\"dom doit etre un instance de Node\")\r\n    if (dom.destroy instanceof Function) return;\r\n    useEvent\r\n    let isDestroyed = false\r\n    let destroyList = []\r\n    const [onReady, dispatchReady] = useEvent({ clearAfterEachDispatch: true })\r\n    const [onConnected, dispatchConnected] = useEvent({ clearAfterEachDispatch: true })\r\n    let isReady = false\r\n    onReady(() => isReady = true)\r\n    const $children = [...dom.childNodes]\r\n    const textRef = new Text()\r\n    const root = new Text()\r\n    const getTextRoot = () => Promise.resolve().then(() => {\r\n        if (dom.parentNode) {\r\n            dom.after(textRef)\r\n            dom.after(root)\r\n        } else if (root.parentNode) {\r\n            root.after(textRef)\r\n        }\r\n        return textRef\r\n    })\r\n    Object.defineProperties(dom, {\r\n        \"onConnected\": {\r\n            get: () => onConnected,\r\n            set: val => onConnected(val)\r\n        },\r\n        \"onReady\": {\r\n            get: () => onReady,\r\n            set: val => onReady(val)\r\n        },\r\n        \"isReady\": {\r\n            get: () => isReady,\r\n        },\r\n        \"dispatchReady\": {\r\n            get: () => dispatchReady,\r\n        },\r\n        \"dispatchConnected\": {\r\n            get: () => dispatchConnected\r\n        },\r\n        \"model\": {},\r\n        isDestroyed: {\r\n            get() { return isDestroyed }\r\n        },\r\n        isClean: {\r\n            get() { return isDestroyed }\r\n        },\r\n        \"destroyList\": { get() { return [...destroyList] } },\r\n        \"onDestroy\": {\r\n            value: (callback) => {\r\n                if (callback instanceof RXState && callback.value instanceof Function) {\r\n                    const state = callback\r\n                    callback = (...args) => {\r\n                        if (!(state.value instanceof Function)) throw new Error(\"state.value doit etre une function\")\r\n                        state.value(...args)\r\n                    }\r\n                } else if (Array.isArray(callback)) {\r\n                    callback.map(fn => dom.onDestroy(fn))\r\n                    return\r\n                }\r\n                if ((callback instanceof Function)) {\r\n                    destroyList.push(callback)\r\n                }\r\n            },\r\n            writable: false\r\n        },\r\n        \"destroy\": {\r\n            value: (withDom = false) => {\r\n                if (dom instanceof Node && !(dom instanceof DocumentFragment)) {\r\n                    dom.remove()\r\n                }\r\n                if (isDestroyed) return\r\n                dom.destroyList.map(fn => fn(withDom))\r\n                isDestroyed = true\r\n                destroyList = []\r\n                if (dom instanceof Text && withDom) {\r\n                    dom.data = \"\"\r\n                }\r\n                dom.$children.map(el => el instanceof Node && el.destroy())\r\n            },\r\n            writable: false\r\n        },\r\n        \"onCleanup\": {\r\n            get() { return dom.onDestroy },\r\n            set(value) { dom.onDestroy(value) }\r\n        },\r\n        \"$children\": {\r\n            get() { return $children },\r\n            set(value) {\r\n                value = Array.isArray(value) ? value : [value]\r\n                $children.push(...value)\r\n            }\r\n        },\r\n        getTextRoot: {\r\n            value: getTextRoot,\r\n            writable: false\r\n        },\r\n        textRef: {\r\n            get() { return textRef }\r\n        }\r\n\r\n    })\r\n    dom.onConnected(() => {\r\n        if (dom.parentNode) {\r\n            dom.after(root)\r\n        }\r\n    })\r\n}\r\n\r\nconst listOfTagPriority = [\"style\", \"link\"]\r\nconst isRendPriority = (element, container) => {\r\n    if (listOfTagPriority.includes(String(element?.type).toLowerCase())) return true\r\n    if (listOfTagPriority.includes(container.localName)) return true\r\n}\r\nfunction createTextRef(container) {\r\n    if (!(container instanceof Node)) throw new Error(\"container doit être de type Node\")\r\n    const txtRef = new Text(\"\")\r\n    if (container.shadowRoot) {\r\n        container.shadowRoot.append(txtRef)\r\n    } else {\r\n        container.append(txtRef)\r\n    }\r\n    return txtRef\r\n}\r\nexport function render(element, container = document.body) {\r\n    if (typeof container == \"string\") container = document.querySelector(container)\r\n    if (!(container instanceof Node)) throw new Error(\"container doit être de type Node\")\r\n    let returnDom\r\n    const txtRef = createTextRef(container)\r\n    function appendChild(dom) {\r\n        if (Array.isArray(dom)) {\r\n            returnDom = dom.map(child => render(child, container))\r\n            return returnDom\r\n        }\r\n        // insertEventDom(dom)\r\n        // insertEventDom(container)\r\n        DomController.$(container).onCleanup(DomController.$(dom).onCleanup)\r\n        // container.onDestroy(dom.destroy)\r\n        const append = () => {\r\n            txtRef.after(dom)\r\n            // if (container instanceof DocumentFragment) container.$children = dom;\r\n            DomController.$(container).$children = dom\r\n            DomController.$(dom).dispatchConnected(container)\r\n            // dom.dispatchConnected(container)\r\n        }\r\n        append()\r\n        txtRef.remove()\r\n        returnDom = dom\r\n    }\r\n    async function init() {\r\n        if (returnDom) return returnDom\r\n        if (!(container instanceof Node)) throw new Error(\"container doit etre un instance de Node\")\r\n        const dom = await needCallback.after(() => createDom(element))\r\n        appendChild(dom)\r\n        return returnDom\r\n    }\r\n    if (isRendPriority(element, container)) {\r\n        const dom = createDom(element)\r\n        appendChild(dom)\r\n    }\r\n    return init()\r\n}\r\n\r\nexport function createDom(fiber) {\r\n    if (fiber instanceof FiberOfNode && fiber.dom instanceof Node) {\r\n        throw new Error(\"fibre a déja une instance dom, fais une copie du fibre si vous voulez une autre instance\")\r\n    }\r\n    if (Array.isArray(fiber)) {\r\n        // fiber=new FiberOfFragment(fiber)\r\n        return fiber.flat(Infinity).map(child => createDom(child))\r\n    } else if (fiber instanceof Function) {\r\n        fiber = new FiberOfElement(fiber, { children: [] })\r\n    } else if (!(fiber instanceof EventTarget) && !(fiber instanceof FiberOfNode)) {\r\n        fiber = new FiberOfText(fiber)\r\n    }\r\n    const dom = createElement(fiber)\r\n    if (fiber instanceof FiberOfNode && dom instanceof Node && !(dom.fiber instanceof FiberOfNode)) {\r\n        Object.defineProperty(dom, \"fiber\", {\r\n            get: () => fiber\r\n        })\r\n    }\r\n\r\n    const createChild = (childDom) => {\r\n        // insertEventDom(childDom)\r\n        // const handlerDom=DomController.$(childDom)\r\n        if (fiber instanceof Node) return childDom\r\n        if (fiber instanceof FiberOfText && RXState.isState(fiber.props.nodeValue)) return bindData(childDom, fiber)\r\n        if (fiber && fiber.type instanceof Function) return childDom\r\n        const rending = []\r\n        if (fiber instanceof FiberOfNode) {\r\n            fiber.dom = childDom\r\n            if (!fiber.props.children) return childDom\r\n            rending.push(...fiber.props.children.flat(Infinity).map(child => {\r\n                if (typeof fiber.components != \"object\") {\r\n                    console.warn(\"fiber.component doit être une object\");\r\n                    fiber.components = {}\r\n                }\r\n                if (child instanceof FiberOfNode) {\r\n                    child.parent = fiber\r\n                    Object.assign(child.directives, fiber.directives)\r\n                    child.components = fiber.components\r\n                }\r\n                return render(child, childDom)\r\n            }))\r\n        }\r\n        Promise.all(rending)\r\n            .then((children) => {\r\n                initProps(childDom, fiber)\r\n                needCallback.after(() => DomController.$(childDom).dispatchReady(childDom, children))\r\n            })\r\n        return childDom\r\n    }\r\n    if (Array.isArray(dom)) {\r\n        if (fiber.parent instanceof FiberOfNode) {\r\n            return dom\r\n        }\r\n        const doc = new DocumentFragment\r\n        // insertEventDom(doc)\r\n        DomController.$(doc).$children = dom\r\n        // doc.$children = dom\r\n        doc.append(...dom)\r\n        return doc\r\n    }\r\n    return createChild(dom)\r\n}","import { useProps } from \"../hooks/indexHooks.js\"\r\n\r\nexport function component(callback, option = { defaultProps: {}}) {\r\n    if(typeof option!=\"object\") throw new Error(\"option doit être une de type object\")\r\n    const defaultProps=option.defaultProps??{}\r\n    if(typeof defaultProps!=\"object\") throw new Error(\"option.defaultProps doit être une de type object\")\r\n    const fn=(props) => callback(useProps({...defaultProps,...props}))\r\n    fn.defaultProps=defaultProps\r\n    return fn\r\n}\r\n","import { useEvent, useProps, useState } from \"../hooks/indexHooks.js\"\r\nimport { createDom } from \"./core.js\"\r\nimport { DomController } from \"./domController.js\"\r\n\r\n\r\nexport function define(tagName, renderCallback, option = { defaultProps: {}, shadowRoot: null }) {\r\n    const _defaultProps = { ...(option.defaultProps ?? {}) }\r\n    const EVENTS = {}\r\n    const CLASSElement = class extends HTMLElement { \r\n        #id = Math.random()\r\n        static get observedAttributes() { return Object.keys(_defaultProps) }\r\n        attributeChangedCallback(name, oldV, newV) {\r\n            if (useState.isState(this.props[name]) && this.props[name].toString() != newV && typeof this.props[name].value != \"object\") {\r\n                this.props[name].set(newV)\r\n            }\r\n        }\r\n        constructor(props) {\r\n            props = typeof props == \"object\" ? props : { children: [] }\r\n            super()\r\n            // insertEventDom(this)\r\n            DomController.$(this)\r\n            // this.innerHTML='<slot/>'\r\n            props = useProps({ ..._defaultProps, ...props })\r\n            props.children.push(...[...this.childNodes].map(c => {\r\n                c.remove()\r\n                insertEventDom(c)\r\n                DomController.$(c)\r\n                return c\r\n            }))\r\n            this.props = props\r\n            Object.entries(props).map(([attrName, attrValue]) => {\r\n                if (attrName == \"children\" || attrName.startsWith('$')) return;\r\n                this.onCleanup = attrValue.onChange((val) => {\r\n                    if (typeof val != 'object') {\r\n                        Promise.resolve().then(() => this.setAttribute(attrName, attrValue.toString()))\r\n                        return () => this.removeAttribute(attrName)\r\n                    }\r\n                    this.removeAttribute(attrName)\r\n                }, true)\r\n            })\r\n            const root = option.shadowRoot && this.attachShadow({\r\n                mode: \"closed\" === option.shadowRoot?.mode ? \"closed\" : \"open\",\r\n                delegatesFocus: !!option.shadowRoot?.delegatesFocus,\r\n                slotAssignment: \"manual\"// === option.shadowRoot?.slotAssignment ? \"manual\" : \"named\"\r\n            })\r\n            EVENTS[this.#id] = {\r\n                connectedCallback: useEvent(),\r\n                disconnectedCallback: useEvent(),\r\n                adoptedCallback: useEvent(),\r\n                onCleanup: [this.onCleanup],\r\n                mounted: useEvent({\r\n                    onSubscribe: (fn) => {\r\n                        return (...arg) => {\r\n                            const rv = fn(arg)\r\n                            if (rv instanceof Function) {\r\n                                this.onCleanup(rv)\r\n                            }\r\n                        }\r\n                    }\r\n                }),\r\n            }\r\n            const $component = Object.freeze({\r\n                root, el: this,\r\n                ...Object.entries(EVENTS[this.#id]).reduce((ob, [k, v]) => {\r\n                    ob[k] = v[0]\r\n                    return ob\r\n                }, {})\r\n            })\r\n            const children = createDom(renderCallback(props, $component))\r\n            const container = root || this\r\n            container.append(children)\r\n            const re = this.dispatchReady(this, children)\r\n            EVENTS[this.#id].mounted[1](this, children)\r\n        }\r\n        connectedCallback(...arg) { EVENTS[this.#id].connectedCallback[1](...arg) }\r\n        disconnectedCallback(...arg) { EVENTS[this.#id].disconnectedCallback[1](...arg) }\r\n        adoptedCallback(...arg) { EVENTS[this.#id].adoptedCallback[1](...arg) }\r\n    }\r\n\r\n    customElements.define(tagName, CLASSElement, { extends: option.extends })\r\n    return (props) => new CLASSElement({children:[],...props})\r\n}","\r\nimport { TemplateRef } from \"../templateRef.js\"\r\nimport { combineAndNoSaveRegExp, createRegExpSplit, combineAndSaveRegExp } from \"../RgExp.js\"\r\n\r\nexport const listTagEmpty = [\"area\", \"base\", \"br\", \"col\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"]\r\nexport const listTagKnown = [\"a\", \"abbr\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"bdi\", \"bdo\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"dialog\", \"dir\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"font\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"marquee\", \"menu\", \"meta\", \"meter\", \"nav\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"picture\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"slot\", \"small\", \"source\", \"span\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"template\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"title\", \"tr\", \"track\", \"u\", \"ul\", \"var\", \"video\", \"wbr\"]\r\n\r\n//a mettre dans RgExp une fois stable\r\nexport const regExpHtmlTag = /<(?:\\/\\s*)?(?:[^\\!<>\\s\"'=\\/\\\\]+)\\s*(?:(?:\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*\"[^\"]*\"|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*'[^']*'|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*[^<>\\s\"'=\\/\\\\]+|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+?)*)\\s*(?:\\/)?\\s*>/g\r\nexport const regExpHtmlTagSave = /(<(?:\\/\\s*)?(?:[^\\!<>\\s\"'=\\/\\\\]+)\\s*(?:(?:\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*\"[^\"]*\"|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*'[^']*'|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*[^<>\\s\"'=\\/\\\\]+|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+?)*)\\s*(?:\\/)?\\s*>)/\r\nexport const regExpHtmlTagFullCapture = /<(?<isClosingTag>\\/\\s*)?(?<type>[^\\!<>\\s\"'=\\/\\\\]+)\\s*(?<attr>(?:\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*\"[^\"]*\"|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*'[^']*'|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+\\s*=\\s*[^<>\\s\"'=\\/\\\\]+|\\s*(?<=\"|'|\\s)[^<>\\s\"'=\\/\\\\]+?)*)\\s*(?<isAutoClose>\\/)?\\s*>/\r\nexport const regStringValidHtml = /[^<>\\s\"'`=\\/\\\\]+/\r\nexport const regStringValidHtmlSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)$/\r\nexport const regAttributeName = /(?<=\"|'|`|\\s*)[^<>\\s\"'`=\\/\\\\]+\\s*/\r\n\r\n// export const regAttrWithQuotes=/(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*\"[^\"]*\")/\r\nexport const regAttrWithQuotesSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*\"(?<attrValue>[^\"]*)\"$/\r\nexport const regExpAttrWithQuotes = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, /\"[^\"]*\"/)\r\n\r\n// export const regAttrWithApostrophe=/(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*'[^']*')/\r\nexport const regAttrWithApostropheSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*'(?<attrValue>[^']*)'$/\r\nexport const regExpAttrWithApostrophe = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, /'[^']*'/)\r\n\r\nexport const regAttrWithBacktic = /(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*`[^`]*`)/\r\nexport const regAttrWithBackticSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*`(?<attrValue>[^`]*)`$/\r\nexport const regExpAttrWithBacktic = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, /`[^`]*`/)\r\n\r\n// export const regAttrWithNoDelimiter=/(?:\\s*(?<=\"|'|`|\\s)[^<>\\s\"'`=\\/\\\\]+\\s*=\\s*[^<>\\s\"'`=\\/\\\\]+\\s*)/\r\nexport const regAttrWithNoDelimiterSaved = /^(?<attrName>[^<>\\s\"'`=\\/\\\\]+)\\s*=\\s*(?<attrValue>[^<>\\s\"'`=\\/\\\\]+)$/\r\nexport const regExpAttrWithNoDelimiter = combineAndNoSaveRegExp(regAttributeName, /\\s*=\\s*/, regStringValidHtml)\r\n\r\n\r\nexport const regExpAttr = createRegExpSplit(\r\n    regExpAttrWithQuotes,\r\n    regExpAttrWithApostrophe,\r\n    regExpAttrWithBacktic,\r\n    regExpAttrWithNoDelimiter,\r\n    /\\s+/\r\n)\r\n\r\nexport function fasteSplitHtmlString(htmlString) { //1\r\n    return htmlString.split(regExpHtmlTagSave)\r\n}\r\n\r\n\r\nexport function isOpenTag(htmlTag) { // 1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    return result.groups.isClosingTag ? false : true\r\n}\r\nexport function isCloseTag(htmlTag) { //1\r\n    return !isOpenTag(htmlTag)\r\n}\r\nexport function getCloseTag(htmlTag) { //1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    return isCloseTag(htmlTag) ? result.groups.type : null\r\n}\r\nexport function getOpenTag(htmlTag) { //1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    return !result.groups.isClosingTag ? result.groups.type : null\r\n}\r\n\r\nexport function parseAttrString(attrString) { //1\r\n    let result\r\n    const counterName = {}\r\n    const value = (attr, name, value) => {\r\n        const directive = (val = value, names = name) => {\r\n            if (attr[names]) {\r\n                let i = Math.round(Math.random() * 100_000_000)\r\n                while ((names + `<${i}>`) in attr) { i++ }\r\n                attr[names + `<${i}>`] = val\r\n                return attr[names]\r\n            }\r\n            return val\r\n        }\r\n        if (name.startsWith(\"?\")||name.startsWith(\"on\")||[\"style\",\"class\"].includes(name)) {\r\n            return directive()\r\n        } else if (result = /^(?<name>\\$[^\\s</>:\\[\\]]+)(?:\\:(?<arg>[^\\s</>:\\[\\]]*)(\\[(?<modifiers>[^\\s</>\\[\\]]*)\\])?)?(?:\\<(?<index>\\d+)\\>)?$/.exec(name)) {\r\n            return directive()\r\n        }\r\n        return isNaN(value) ? value : Number(value)\r\n    }\r\n    return attrString.split(regExpAttr).reduce((attr, chaine) => {\r\n        if (/^\\s*$/.test(chaine)) return attr\r\n        let result\r\n        if (result = regAttrWithQuotesSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regAttrWithApostropheSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regAttrWithBackticSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regAttrWithNoDelimiterSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = value(attr, result.groups.attrName, result.groups.attrValue)\r\n        } else if (result = regStringValidHtmlSaved.exec(chaine)) {\r\n            attr[result.groups.attrName] = \"\"\r\n        }\r\n        return attr\r\n    }, {})\r\n}\r\nexport function parseHtmlTag(htmlTag) { //1\r\n    const result = regExpHtmlTagFullCapture.exec(htmlTag)\r\n    if (!result) return null\r\n    const { type, attr, isAutoClose, isClosingTag } = result.groups\r\n    return {\r\n        get isTagEmpty() {\r\n            return listTagEmpty.includes(this.type)\r\n        },\r\n        get isTagKnown() {\r\n            return listTagKnown.includes(this.type)\r\n        },\r\n        type,\r\n        attr,\r\n        isAutoClose,\r\n        isClosingTag,\r\n        htmlTag,\r\n        props: parseAttrString(result.groups.attr),\r\n        initType(rxRefs) {\r\n            if (!(rxRefs instanceof TemplateRef)) throw new Error(\"rxRefs must be instance of RXRefs\")\r\n            const parseResult = TemplateRef.parse(this.type, rxRefs)\r\n            if (parseResult && parseResult.value.length == 2 && parseResult.value[0].at(-1) == \":\" && parseResult.value[1] instanceof Function) {\r\n                this.type = parseResult.value[0].slice(0, -1)\r\n                rxRefs.components[this.type] = parseResult.value[1]\r\n                // this.type = rxRefs.components[this.type]\r\n                return this.type\r\n            }\r\n            let type = TemplateRef.split(this.type, (({ index }) => rxRefs[index]))\r\n            type = type.length === 1 ? type[0] : type.join(\"\")\r\n            if (typeof type != \"string\" && typeof type != \"function\") {\r\n                type = `${typeof type}.is-not-component-valid`\r\n            }\r\n            // const componentList = Object.keys(rxRefs.components ?? {})\r\n            // if (!isKnownElement(type) && componentList.includes(type)) {\r\n            //     type = rxRefs.components[type]\r\n            // }\r\n            return this.type = type\r\n        }\r\n    }\r\n}\r\nexport function isKnownElement(type) {\r\n    return listTagKnown.includes(type?.toLowerCase?.())\r\n}\r\nexport function isTagEmpty(type) {\r\n    return listTagEmpty.includes(type?.toLowerCase?.())\r\n}","import { FiberOfElement, FiberOfFragment, FiberOfNode, FiberOfText } from \"../RxFiber/indexOfFiber.js\"\r\nimport { TemplateRef } from \"../templateRef.js\"\r\nimport { createRegExpSplit } from \"../RgExp.js\"\r\nimport { fasteSplitHtmlString, isOpenTag, isTagEmpty, parseHtmlTag } from \"./HtmlStringParser.js\"\r\n\r\nfunction rxReform(fiberList, htmlStringSplited, dataBinding) {\r\n    while (htmlStringSplited.length) {\r\n        const text = htmlStringSplited.shift()\r\n        if (/^\\s*$/.test(text)) continue\r\n        if (isOpenTag(text)) {\r\n            const fiber = parseHtmlTag(text)\r\n            fiber.children = []\r\n            fiber.initType(dataBinding)\r\n            if (!isTagEmpty(fiber.type) && !fiber.isAutoClose) {\r\n                getChildren(fiber, htmlStringSplited, dataBinding)\r\n            }\r\n            const el = new FiberOfElement(fiber.type, { ...fiber.props, children: fiber.children }, dataBinding)\r\n            fiberList.push(el)\r\n        } else {\r\n            const listT = text.split(createRegExpSplit(TemplateRef.regExp, /{{[^{}]*}}/))//(/((?:\\(_\\|-\\[RXRefs\\{index:\\d+,type:\\w+\\}\\]-\\|_\\))|(?:{{[^{}]*}}))/)\r\n            if (/^\\s*$/.test(listT[0])) listT.shift()\r\n            if (/^\\s*$/.test(listT.at(-1))) listT.pop()\r\n            fiberList.push(...listT.map(t => {\r\n                const isRef = (typeof t == \"string\") ? TemplateRef.parse(t, dataBinding) : t\r\n                t = isRef ? isRef.value[0] : t\r\n                if (typeof t != \"string\") return t\r\n                const isComment = (c) => /\\s*\\<\\!--.*--\\>\\s*/.test(c)\r\n                if (isComment(t)) {\r\n                    return t.split(/(\\s*\\<\\!--.*--\\>\\s*)/).map(t =>isComment(t) ? document.createComment(/^\\s*\\<\\!--(.*)--\\>\\s*$/.exec(t)[1]): t).filter(t => t)\r\n                }\r\n                return new FiberOfText(t, dataBinding)\r\n            }))\r\n        }\r\n    }\r\n    return fiberList\r\n}\r\nfunction getChildren(fiber, htmlStringSplited, dataBinding) {\r\n    if (fiber.type instanceof Function && !fiber.type.name) return\r\n    let count = 1\r\n    const index = htmlStringSplited.findIndex(e => {\r\n        const tag = parseHtmlTag(e)\r\n        const rcRef = TemplateRef.parse(tag ? tag.type : e, dataBinding)\r\n        if (tag && ((rcRef && rcRef.value[0] === fiber.type) || (tag.type === fiber.type))) {\r\n            count = tag.isClosingTag ? count - 1 : count + 1\r\n            if (tag.isClosingTag && count <= 0) return true\r\n        }\r\n        return false\r\n    })\r\n    if (index === -1) {\r\n        fiber.children = htmlStringSplited.splice(0, htmlStringSplited.length).filter(e => !/^\\s*$/.test(e))\r\n    } else {\r\n        fiber.children = htmlStringSplited.splice(0, index + 1).filter(e => !/^\\s*$/.test(e))\r\n        fiber.children.pop()\r\n    }\r\n    if (fiber.type == \"script\") {\r\n        let innerText = fiber.children.join(\"\")\r\n        const res = TemplateRef.parse(innerText, dataBinding)\r\n        if (res) {\r\n            innerText = res.valueString\r\n        }\r\n        fiber.children = [new Text(innerText)]\r\n    } else {\r\n        fiber.children = rxReform([], fiber.children, dataBinding)\r\n    }\r\n}\r\nfunction parse(strings, ...rxRefs) {\r\n    return [[...rxRefs.reduce((list, _str, index) => {\r\n        list.push(strings[index], `(_|-[RXRefs{index:${index},type:${typeof rxRefs[index]}}]-|_)`)\r\n        return list\r\n    }, []), strings[rxRefs.length]].join(\"\"), rxRefs]\r\n}\r\n\r\nfunction parseHtmlString(htmlString, rxRefs) {\r\n    if (!(rxRefs instanceof TemplateRef)) throw new Error(\"rxRefs must be instance of RXRefs\")\r\n    const htmlArray = fasteSplitHtmlString(htmlString)\r\n    const html = rxReform([], htmlArray, rxRefs)\r\n    if (html.length == 1) {\r\n        const el = html[0]\r\n        return el instanceof FiberOfNode ? el : new FiberOfText(el, rxRefs)\r\n    }\r\n    const frag = new FiberOfFragment(html, rxRefs)\r\n    return frag\r\n}\r\n\r\nexport function template(strings, ...refs) {\r\n    let config\r\n    if (typeof refs[0] == \"object\" && refs[0][\"<isStore>\"] === true) {\r\n        config = refs[0]\r\n        refs[0] = \"\"\r\n    }\r\n    const [htmlstring] = parse(strings, ...refs)\r\n    const rxRefs = new TemplateRef(...refs)\r\n    const rcNode = parseHtmlString(htmlstring, rxRefs)\r\n    if (config) {\r\n        if (config.components && typeof config.components == \"object\") rcNode.components = config.components\r\n        if (config.directives && typeof config.directives == \"object\") rcNode.directives = config.directives\r\n    }\r\n    return rcNode\r\n}","export { createDom, render } from \"./Rimax/core/core.js\";\r\nexport {component} from \"./Rimax/core/component.js\";\r\nexport { useState, RXState,useRef,useEffect,useLayoutEffect,useProps,useEvent,useMemo } from \"./Rimax/hooks/indexHooks.js\";\r\nexport {define} from \"./Rimax/core/customeElement.js\";\r\nexport { TemplateRef as LinksOfDataInTemplateString } from \"./Rimax/core/templateRef.js\";\r\nexport {FiberOfElement,FiberOfFragment,FiberOfNode,FiberOfText} from \"./Rimax/core/RxFiber/indexOfFiber.js\";\r\nexport { template } from \"./Rimax/core/RcHtmlString/RcHtmlString.js\";\r\n\r\nimport { createDom, } from \"./Rimax/core/core.js\";\r\nimport { useState,RXState} from \"./Rimax/hooks/indexHooks.js\";\r\nimport { template } from \"./Rimax/core/RcHtmlString/RcHtmlString.js\";\r\n\r\n\r\nexport function html(...args) {\r\n    return createDom(template(...args))\r\n}\r\nconst needCallback = (callback, args, $this) => callback.apply($this, args)\r\nneedCallback.after = (callback, args, $this) => Promise.resolve().then(() => callback.apply($this, args))\r\nneedCallback.idle = (callback, args, $this) => requestIdleCallback(() => callback.apply($this, args))\r\n//###################\r\nconst Fragment = \"FRAGMENT\"\r\nconst TextElement = \"TEXT\"\r\nexport function createFiber(type, props, ...children) {\r\n    const refs = new LinksOfDataInTemplateString()\r\n    props = props ?? { children: [] }\r\n    children = children.map(child => child instanceof RcHtmlNode ? child : new RcHtmlText(child, refs))\r\n    if (type == Fragment) {\r\n        return new RcHtmlFragment(children, refs)\r\n    }\r\n    if (type == TextElement) {\r\n        return new RcHtmlText(children, refs)\r\n    }\r\n    return new RcHtmlElement(type, { ...props, children }, refs)\r\n}\r\ncreateFiber.Fragment = Fragment\r\ncreateFiber.Text = TextElement\r\n//###################\r\n\r\n\r\nfunction map(state, callback) {\r\n    const list=state instanceof RXState?[...(state.value)]:state\r\n    var [state,setState]=useState(state,(v)=>{\r\n        list.splice(0,list.length,...v)\r\n        return list\r\n    })\r\n    // isFunction(callback)\r\n    const createState = (v, i) => [useState(v)[0], useState(i)[0]]\r\n    const rendMap = (v) => callback(...v, state,(value)=>{\r\n        const [item,index]=v\r\n        return setState.edit(index,value)\r\n    })\r\n    const listState = state.value.map(createState)\r\n    let listElement = needCallback.after(()=>listState.map(rendMap))\r\n    const [items, setItems] = useState(listElement)\r\n    items.onChange(list=>needCallback.after(()=>{\r\n        if(list instanceof Promise) return;\r\n        if(!list.every(item=>item instanceof Node)){\r\n            throw new Error(\"html.map doit retourner des list d'element Node\")\r\n        }\r\n    }),true)\r\n    const update = () => listState.map(([v, i], index) => needCallback.after(()=>{\r\n        if (!i.isDestroyed) i.set(index);\r\n        if (!v.isDestroyed) v.set(state.value[index]);\r\n    }))\r\n    state.onChange((val) => {\r\n        if (listState.length > val.length) {\r\n            const indexStart = val.length\r\n            const end = listState.length\r\n            listState.splice(indexStart, end).map(s => s.map(i => i.destroy(true)))\r\n            setItems.splice(indexStart, end)\r\n        } else if (listState.length < val.length) {\r\n            const indexStart = listState.length\r\n            listState.push(...val.slice(indexStart).map(createState))\r\n            listState.map(([, index], i) => index.set(i))\r\n            setItems.push(...listState.slice(indexStart).map(rendMap))\r\n        }\r\n        update()\r\n        // console.log(items.value);\r\n    })\r\n    return items\r\n}\r\nhtml.map=map\r\n"],"names":["guardFn","v","stateSymbol","Symbol","isState","ref","bind","RXState","isArray","Array","this","value","toString","String","valueOf","static","createState","guard","currentValueOfState","oldValueOfState","isDestroyed","subscriber","ID","Math","random","GUARDS","DESTROY_EVENTS","Set","UPDATE_EVENTS","ACTIONS","Object","freeze","guards","id","len","onChange","size","onCleanup","addGuard","Function","callback","a","lastIndex","push","isRemoved","splice","i","find","fn","clear","withDom","forEach","destroy","callbackOrState","directApply","state","args","set","slice","Error","on","dispatch","undefined","methode","onDispatch","arg","isCalled","delete","add","oldValue","constructor","super","defineProperty","get","enumerable","assign","actions","toValidate","option","oldValues","reduceRight","val","Promise","createStateComputed","dependencies","optDependencies","update","optionState","setState","useState","listrmv","map","st","_1","_2","entries","stateType","type","fnGuard","then","_oldValue","dispatchUpdate","stateInstace","isFunction","getIndex","index","findIndex","isNaN","rendMap","listState","listElement","items","setItems","length","indexStart","end","s","action","returnValue","remove","start","deleteCount","edit","pop","shift","unshift","reverse","fill","filter","predicate","sort","compareFn","b","every","item","arguments","callbackfn","thisArg","insertArrayMethode","k","payload","array","number","string","function","boolean","symbol","object","refSymbol","useRef","changeRef","OBJECT","configurable","useEffect","states","listRmv","getValue","resolve","requestIdleCallback","useLayoutEffect","useProps","props","reduce","prop","key","startsWith","isRef","handlerEvent","beforeDispatch","afterDispatch","data","onSubscribe","clearAfterEachDispatch","useEvent","handler","EVENTS","rest","useMemo","DATABASE","Map","DomController","dom","Node","destroyList","onReady","dispatchReady","onConnected","dispatchConnected","isReady","$children","childNodes","textRef","Text","root","isValid","onCleanUp","onDestroy","defineProperties","getFiber","model","isClean","DocumentFragment","el","$","writable","getTextRoot","parentNode","after","isConnected","parentElement","onconnected","console","log","createHandler","children","flat","Infinity","codeLogError","fr","en","CODES","combineAndNoSaveRegExp","regs","RegExp","regFinal","reg","source","getRegSource","combineRegExp","createRegExpSaved","createRegExp","createRegExpSplit","code","lang","includes","name","rxError","TemplateRef","regExp","regExpSaved","regExpSavedG","split","chaine","includeResults","l","r","parse","replaceAll","input","refs","result","exec","valueString","join","groups","components","customeElementRegistry","directiveOption","attrName","attrValue","directiveName","modifiers","FiberOfNode","directives","$onInit","warn","$shadowRoot","elementsCanAttachShadowRoot","localName","oldChildren","attachShadow","mode","innerHTML","append","$attrState","setAttribute","cleanup","$if","listCondition","hasValidNow","values","isTrue","makeVisible","isVisible","$ref","current","$show","isShow","hidden","$bind","fnRmvs","getAttribute","keys","eventName","addEventListener","removeEventListener","$directives","initProps","getrefs","generateKey","at","indexA","indexOf","round","gk","attrNameComputed","valueArray","test","valueFinal","hasValueFinal","stateValue","hasCallback","hasState","createMemo","callbackName","attr","lnc","ismustState","parent","parentFiber","domValue","FiberOfElement","child","FiberOfFragment","FiberOfText","text","nodeValue","needCallback","$this","apply","idle","updateArray","valueOfState","$firstElement","listDom","indexItem","createDom","e","_e","before","bindData","textDom","textFiber","isRended","putAfter","elRef","elTarget","isforced","rendLater","p","JSON","stringify","error","updateDataBinding","listOfTagPriority","render","element","container","document","body","querySelector","returnDom","txtRef","shadowRoot","createTextRef","appendChild","toLowerCase","isRendPriority","async","init","fiber","EventTarget","sendListOfDom","list","component","defaultProps","createElement","doc","childDom","rending","all","HTMLElement","globalData","counterName","setOneAttribute","listOnCleanup","domEl","attrN","HTMLSelectElement","multiple","setAttr","rendAttribute","onRemove","redOneStyle","oldVal","toClean","resultReg","rcState","res","applyCallback","removeEv","rmv","Number","modif","selectedIndex","opt","target","checked","styleDefault","style","cssText","rendStyle","rendClass","addValue","_value","classList","removeValue","rmvAttr","insertAttr","inertAttr","when","rmAt","clean","removeAttribute","createChild","define","tagName","renderCallback","_defaultProps","CLASSElement","observedAttributes","attributeChangedCallback","oldV","newV","c","insertEventDom","delegatesFocus","slotAssignment","connectedCallback","disconnectedCallback","adoptedCallback","mounted","rv","$component","ob","customElements","extends","listTagEmpty","listTagKnown","regExpHtmlTagSave","regExpHtmlTagFullCapture","regStringValidHtmlSaved","regAttributeName","regAttrWithQuotesSaved","regExpAttrWithQuotes","regAttrWithApostropheSaved","regExpAttrWithApostrophe","regAttrWithBackticSaved","regExpAttrWithBacktic","regAttrWithNoDelimiterSaved","regExpAttr","isOpenTag","htmlTag","isClosingTag","parseAttrString","attrString","directive","names","parseHtmlTag","isAutoClose","isTagEmpty","isTagKnown","initType","rxRefs","parseResult","rxReform","fiberList","htmlStringSplited","dataBinding","getChildren","listT","t","isComment","createComment","count","tag","rcRef","innerText","parseHtmlString","htmlString","htmlArray","fasteSplitHtmlString","html","template","strings","config","htmlstring","_str","rcNode","createFiber","LinksOfDataInTemplateString","RcHtmlNode","RcHtmlText","RcHtmlFragment","RcHtmlElement","Fragment"],"mappings":"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"}